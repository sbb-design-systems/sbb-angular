name: Staging Deployment
# Secure deployment of pull request artifacts
# https://securitylab.github.com/research/github-actions-preventing-pwn-requests/
on:
  workflow_run:
    workflows: ["Continuous Integration"]
    types: [completed]

jobs:
  staging-deployment:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Setup NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: 14
      - run: npm i decompress@4.2.1 node-fetch@2.6.2 form-data@4.0.0
      - name: Download Artifacts
        uses: actions/github-script@v4
        env:
          stagingAuth: ${{ secrets.STAGING_SBB_ANGULAR }}
          stagingUrl: https://staging-sbb-angular.app.sbb.ch
        with:
          script: |
            const decompress = require('decompress');
            const { createReadStream, writeFileSync } = require('fs');
            const fetch = require('node-fetch');
            const FormData = require('form-data');

            const { stagingAuth, stagingUrl } = process.env;
            const artifactsUrl = context.payload.workflow_run.artifacts_url;
            
            const artifactsResult = await github.request(artifactsUrl);
            const artifacts = artifactsResult.data.artifacts.filter(
              a => a.name.startsWith('showcase-artifact-') || a.name.startsWith('showcase-merge-artifact-')
            );

            for (const artifactEntry of artifacts) {
              try {
                const artifact = await github.request(artifactEntry.archive_download_url);
                const result = await decompress(Buffer.from(artifact.data), '.');

                let version = artifactEntry.name.match(/-([\w\d]+)$/)[1];
                if (artifactEntry.name.includes('-merge-')) {
                  version += '-merge';
                }
                const form = new FormData();
                form.append('tarball', createReadStream(result[0].path));
                await fetch(`${stagingUrl}/${version}`, {
                  method: 'POST',
                  headers: form.getHeaders({
                    'authorization': `Basic ${stagingAuth}`
                  }),
                  body: form
                });
              } catch(e) {
                console.error(`Failed to download and unzip ${artifactEntry.name}`);
              }
            }

            if (artifacts.length && context.payload.workflow_run.pull_requests.length) {
              const pullRequest = context.payload.workflow_run.pull_requests[0];
              const createdAtDate = new Date(context.payload.workflow_run.created_at).toLocaleString('de');
              github.issues.createComment({
                issue_number: pullRequest.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `Staging ready from ${pullRequest.head.sha} at ${createdAtDate}:\n- ${stagingUrl}/${pullRequest.number}\n- ${stagingUrl}/${pullRequest.number}-merge`
              });
            }
