name: Continuous Integration
on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'
  pull_request:
    branches:
      - '**'
    tags-ignore:
      - '**'
env:
  BAZEL_COMMAND: bazelisk

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Shallow checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - uses: actions/setup-node@v1
      with:
        node-version: 14

    - name: "Yarn: Get cache directory path"
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - name: "Yarn: Restore dependencies from cache"
      uses: actions/cache@v2
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock', '**/tools/postinstall/apply-patches.js') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - name: "Yarn: Install dependencies"
      run: yarn install --frozen-lockfile --non-interactive

    - name: "Lint: Run tslint and bazel linter"
      run: yarn lint

  build:
    runs-on: ubuntu-latest
    steps:
    - name: "VM: Free disk space"
      run: |
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
    - name: Shallow checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: "Bazel: Copy bazel.rc to user home"
      run: cp ./.github/.bazelrc ~/
    - uses: actions/setup-node@v1
      with:
        node-version: 14

    - name: "Yarn: Get cache directory path"
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - name: "Yarn: Restore dependencies from cache"
      uses: actions/cache@v2
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock', '**/tools/postinstall/apply-patches.js') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - name: "Yarn: Install dependencies"
      run: yarn install --frozen-lockfile --non-interactive
    - name: "Bazel: Restore remote cache"
      if: ${{ success() || failure() }}
      uses: actions/cache@v2
      with:
        path: ~/.bazel-cache/sbb-angular
        key: bazel-noop-${{ github.sha }}
        restore-keys: |
          bazel-merged-
    - name: "Bazel: Clear cache"
      if: ${{ contains(github.event.head_commit.message, '--no-cache') }}
      run: rm -rf ~/.bazel-cache
    - name: "Bazel: Build"
      run: yarn -s build all
      timeout-minutes: 45
    - name: "Bazel: Clean bazel disk cache"
      if: ${{ success() || failure() }}
      run: yarn -s bazel:cache clean --individualMaxSize=50MB
    - name: "Bazel: Compress artifacts"
      if: ${{ success() || failure() }}
      run: |
        cd ~/.bazel-cache
        tar -I zstd -cf bazel-cache.tar.zst sbb-angular
    - name: "Bazel: Upload cache artifacts"
      if: ${{ success() || failure() }}
      uses: actions/upload-artifact@v2
      with:
        name: bazel-cache-artifact
        path: ~/.bazel-cache/bazel-cache.tar.zst
    - name: "Bazel: Clear cache directory"
      if: ${{ success() || failure() }}
      run: rm -rf ~/.bazel-cache

  packages:
    runs-on: ubuntu-latest
    steps:
    - name: Shallow checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: "Bazel: Copy bazel.rc to user home"
      run: cp ./.github/.bazelrc ~/
    - uses: actions/setup-node@v1
      with:
        node-version: 14

    - name: "Yarn: Get cache directory path"
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - name: "Yarn: Restore dependencies from cache"
      uses: actions/cache@v2
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock', '**/tools/postinstall/apply-patches.js') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - name: "Yarn: Install dependencies"
      run: yarn install --frozen-lockfile --non-interactive

    - name: "Bazel: Restore remote cache"
      if: ${{ success() || failure() }}
      uses: actions/cache@v2
      with:
        path: ~/.bazel-cache/sbb-angular
        key: bazel-packages-${{ github.sha }}
        restore-keys: |
          bazel-packages-
    - name: "Bazel: Clear cache"
      if: ${{ contains(github.event.head_commit.message, '--no-cache') }}
      run: rm -rf ~/.bazel-cache
    - name: "Bazel: Build packages"
      run: yarn -s build packages
    - name: "Bazel: Clean bazel disk cache"
      if: ${{ success() || failure() }}
      run: yarn -s bazel:cache clean --maxSize 150MB

  test:
    if: ${{ success() || failure() }}
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: "VM: Free disk space"
      run: |
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
    - name: Shallow checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: "Bazel: Copy bazel.rc to user home"
      run: cp ./.github/.bazelrc ~/
    - uses: actions/setup-node@v1
      with:
        node-version: 14

    - name: "Yarn: Get cache directory path"
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - name: "Yarn: Restore dependencies from cache"
      uses: actions/cache@v2
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock', '**/tools/postinstall/apply-patches.js') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - name: "Yarn: Install dependencies"
      run: yarn install --frozen-lockfile --non-interactive

    - name: "Bazel: Download cache artifacts"
      if: ${{ success() || failure() }}
      uses: actions/download-artifact@v2
      with:
        name: bazel-cache-artifact
        path: ~/.bazel-cache/
    - name: "Bazel: Unpack artifacts"
      if: ${{ success() || failure() }}
      run: |
        cd ~/.bazel-cache/
        tar -I zstd -xf bazel-cache.tar.zst
        rm -f bazel-cache.tar.zst
    - name: "Bazel: Run local tests"
      run: bazelisk test src/... --build_tag_filters=-e2e --test_tag_filters=-e2e --build_tests_only
    - name: "Bazel: Clean bazel disk cache"
      if: ${{ success() || failure() }}
      run: yarn -s bazel:cache clean --individualMaxSize=50MB
    - name: "Bazel: Compress artifacts"
      if: ${{ success() || failure() }}
      run: |
        cd ~/.bazel-cache
        tar -I zstd -cf bazel-cache-test.tar.zst sbb-angular
    - name: "Bazel: Upload cache artifacts"
      if: ${{ success() || failure() }}
      uses: actions/upload-artifact@v2
      with:
        name: bazel-cache-test-artifact
        path: ~/.bazel-cache/bazel-cache-test.tar.zst
    - name: "Bazel: Clear cache directory"
      if: ${{ success() || failure() }}
      run: rm -rf ~/.bazel-cache

  showcase-merge:
    if: ${{ success() || failure() }}
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Shallow checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: "Bazel: Copy bazel.rc to user home"
      run: cp ./.github/.bazelrc ~/
    - uses: actions/setup-node@v1
      with:
        node-version: 14

    - name: "Yarn: Get cache directory path"
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - name: "Yarn: Restore dependencies from cache"
      uses: actions/cache@v2
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock', '**/tools/postinstall/apply-patches.js') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - name: "Yarn: Install dependencies"
      run: yarn install --frozen-lockfile --non-interactive

    - name: "Bazel: Download cache artifacts"
      if: ${{ success() || failure() }}
      uses: actions/download-artifact@v2
      with:
        name: bazel-cache-artifact
        path: ~/.bazel-cache/
    - name: "Bazel: Unpack artifacts"
      if: ${{ success() || failure() }}
      run: |
        cd ~/.bazel-cache/
        tar -I zstd -xf bazel-cache.tar.zst
        rm -f bazel-cache.tar.zst
    - name: "Bazel: Build showcase"
      if: ${{ success() || failure() }}
      run: yarn -s build showcase-merge
    - name: "Bazel: Clean bazel disk cache"
      if: ${{ success() || failure() }}
      run: yarn -s bazel:cache clean --individualMaxSize=50MB
    - name: "Bazel: Compress artifacts"
      if: ${{ success() || failure() }}
      run: |
        cd ~/.bazel-cache
        tar -I zstd -cf bazel-cache-showcase-merge.tar.zst sbb-angular
    - name: "Bazel: Upload cache artifacts"
      if: ${{ success() || failure() }}
      uses: actions/upload-artifact@v2
      with:
        name: bazel-cache-showcase-merge-artifact
        path: ~/.bazel-cache/bazel-cache-showcase-merge.tar.zst
    - name: "Bazel: Clear cache directory"
      if: ${{ success() || failure() }}
      run: rm -rf ~/.bazel-cache

    - name: "Deploy: Pack showcase"
      run: mv $(npm pack ./dist/releases/showcase-merge | tail -n 1) sbb-esta-angular-showcase-merge.tgz
    - name: "Artifact: Upload showcase merge artifact for pull request"
      if: github.event_name == 'pull_request'
      uses: actions/upload-artifact@v2
      with:
        name: showcase-merge-artifact-${{ github.event.number }}
        path: sbb-esta-angular-showcase-merge.tgz
    - name: "Artifact: Upload showcase merge artifact for master branch"
      if: github.ref == 'refs/heads/master'
      uses: actions/upload-artifact@v2
      with:
        name: showcase-merge-artifact-master
        path: sbb-esta-angular-showcase-merge.tgz

  merge-caches:
    if: ${{ success() || failure() }}
    needs: [test, showcase-merge]
    runs-on: ubuntu-latest
    steps:
    - name: Shallow checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - uses: actions/setup-node@v1
      with:
        node-version: 14

    - name: "Yarn: Install global dependencies"
      run: yarn global add typescript ts-node

    - name: "Bazel: Create cache directory"
      run: mkdir -p ~/.bazel-cache/
    - name: "Bazel: Restore remote cache"
      if: ${{ success() || failure() }}
      uses: actions/cache@v2
      with:
        path: ~/.bazel-cache/sbb-angular
        key: bazel-merged-${{ github.sha }}
        restore-keys: |
          bazel-merged-
    - name: "Bazel: Download test cache artifacts"
      if: ${{ success() || failure() }}
      uses: actions/download-artifact@v2
      with:
        name: bazel-cache-test-artifact
        path: ~/.bazel-cache/
    - name: "Bazel: Download showcase-merge cache artifacts"
      if: ${{ success() || failure() }}
      uses: actions/download-artifact@v2
      with:
        name: bazel-cache-showcase-merge-artifact
        path: ~/.bazel-cache/
    - name: "Bazel: Unpack artifacts"
      if: ${{ success() || failure() }}
      run: |
        cd ~/.bazel-cache/
        ls -la
        tar -I zstd -xf bazel-cache-test.tar.zst
        rm -f bazel-cache-test.tar.zst
        tar -I zstd -xf bazel-cache-showcase-merge.tar.zst
        rm -f bazel-cache-showcase-merge.tar.zst
    - name: "Bazel: Clean bazel disk cache"
      if: ${{ success() || failure() }}
      run: yarn -s bazel:cache clean --maxSize 750MB --individualMaxSize=20MB
