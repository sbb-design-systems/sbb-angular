name: Continuous Integration
on: [push, pull_request]
env:
  BAZEL_COMMAND: bazelisk

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2
      with:
        node-version: 16
    - name: "Yarn: Install"
      uses: ./.github/actions/yarn-install

    - name: "Lint: Run tslint and bazel linter"
      run: yarn lint

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: "Bazel: Copy bazel.rc to user home"
      run: cp ./.github/.bazelrc ~/
    - uses: actions/setup-node@v2
      with:
        node-version: 16
    - name: "Yarn: Install"
      uses: ./.github/actions/yarn-install

    - name: "Bazel: Restore remote cache"
      if: ${{ success() || failure() }}
      uses: actions/cache@v2
      with:
        path: ~/.bazel-cache/sbb-angular
        key: bazel-noop-${{ github.sha }}-${{ github.run_attempt }}
        restore-keys: bazel-merged-
    - name: "Bazel: Clear cache"
      if: ${{ contains(github.event.head_commit.message, '--no-cache') }}
      run: rm -rf ~/.bazel-cache

    - name: "Bazel: Build"
      run: yarn -s build all
      timeout-minutes: 45
    - name: "Bazel: Clean bazel disk cache"
      if: ${{ success() || failure() }}
      run: yarn -s bazel:cache clean --individualMaxSize=50MB
    - name: "Bazel: Upload cache"
      uses: ./.github/actions/upload-bazel-cache
      if: ${{ success() || failure() }}
    - name: "Bazel: Clear cache directory"
      if: ${{ success() || failure() }}
      run: rm -rf ~/.bazel-cache

  packages:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: "Bazel: Copy bazel.rc to user home"
      run: cp ./.github/.bazelrc ~/
    - uses: actions/setup-node@v2
      with:
        node-version: 16
    - name: "Yarn: Install"
      uses: ./.github/actions/yarn-install

    - name: "Bazel: Restore remote cache"
      if: ${{ success() || failure() }}
      uses: actions/cache@v2
      with:
        path: ~/.bazel-cache/sbb-angular
        key: bazel-packages-${{ github.sha }}
        restore-keys: bazel-packages-
    - name: "Bazel: Clear cache"
      if: ${{ contains(github.event.head_commit.message, '--no-cache') }}
      run: rm -rf ~/.bazel-cache
    - name: "Bazel: Build packages"
      run: yarn -s build packages
    - name: "Bazel: Clean bazel disk cache"
      if: ${{ success() || failure() }}
      run: yarn -s bazel:cache clean --maxSize 150MB

  test:
    if: ${{ success() || failure() }}
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: "Bazel: Copy bazel.rc to user home"
      run: cp ./.github/.bazelrc ~/
    - uses: actions/setup-node@v2
      with:
        node-version: 16
    - name: "Yarn: Install"
      uses: ./.github/actions/yarn-install
    - name: "Bazel: Download cache"
      uses: ./.github/actions/download-bazel-cache
      if: ${{ success() || failure() }}

    - name: "Bazel: Run local tests"
      run: bazelisk test src/... --build_tag_filters=-e2e --test_tag_filters=-e2e --build_tests_only
    - name: "Bazel: Clean bazel disk cache"
      if: ${{ success() || failure() }}
      run: yarn -s bazel:cache clean --individualMaxSize=50MB
    - name: "Bazel: Upload cache"
      uses: ./.github/actions/upload-bazel-cache
      if: ${{ success() || failure() }}
      with:
        key: bazel-cache-test
    - name: "Bazel: Clear cache directory"
      if: ${{ success() || failure() }}
      run: rm -rf ~/.bazel-cache

  showcase-merge:
    if: ${{ success() || failure() }}
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: "Bazel: Copy bazel.rc to user home"
      run: cp ./.github/.bazelrc ~/
    - uses: actions/setup-node@v2
      with:
        node-version: 16
    - name: "Yarn: Install"
      uses: ./.github/actions/yarn-install
    - name: "Bazel: Download cache"
      uses: ./.github/actions/download-bazel-cache
      if: ${{ success() || failure() }}

    - name: "Bazel: Build showcase"
      if: ${{ success() || failure() }}
      run: yarn -s build showcase-merge
    - name: "Bazel: Clean bazel disk cache"
      if: ${{ success() || failure() }}
      run: yarn -s bazel:cache clean --individualMaxSize=50MB
    - name: "Bazel: Upload cache"
      uses: ./.github/actions/upload-bazel-cache
      if: ${{ success() || failure() }}
      with:
        key: bazel-cache-showcase
    - name: "Bazel: Clear cache directory"
      if: ${{ success() || failure() }}
      run: rm -rf ~/.bazel-cache

    - name: "Deploy: Pack showcase"
      run: mv $(npm pack ./dist/releases/showcase-merge | tail -n 1) sbb-esta-angular-showcase-merge.tgz
    - name: "Artifact: Upload showcase merge artifact for pull request"
      if: github.event_name == 'pull_request'
      uses: actions/upload-artifact@v2
      with:
        name: showcase-merge-artifact-${{ github.event.number }}
        path: sbb-esta-angular-showcase-merge.tgz
    - name: "Artifact: Upload showcase merge artifact for master branch"
      if: github.ref == 'refs/heads/master'
      uses: actions/upload-artifact@v2
      with:
        name: showcase-merge-artifact-master
        path: sbb-esta-angular-showcase-merge.tgz

  merge-caches:
    if: ${{ success() || failure() }}
    needs: [test, showcase-merge]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2
      with:
        node-version: 16

    - name: "Yarn: Install global dependencies"
      run: yarn global add typescript ts-node

    - name: "Bazel: Create cache directory"
      run: mkdir -p ~/.bazel-cache/
    - name: "Bazel: Restore remote cache"
      if: ${{ success() || failure() }}
      uses: actions/cache@v2
      with:
        path: ~/.bazel-cache/sbb-angular
        key: bazel-merged-${{ github.sha }}
        restore-keys: |
          bazel-merged-
    - name: "Bazel: Download test cache"
      uses: ./.github/actions/download-bazel-cache
      if: ${{ success() || failure() }}
      with:
        key: bazel-cache-test
    - name: "Bazel: Download showcase cache"
      uses: ./.github/actions/download-bazel-cache
      if: ${{ success() || failure() }}
      with:
        key: bazel-cache-showcase
    - name: "Bazel: Clean bazel disk cache"
      if: ${{ success() || failure() }}
      run: yarn -s bazel:cache clean --maxSize 750MB --individualMaxSize=20MB
