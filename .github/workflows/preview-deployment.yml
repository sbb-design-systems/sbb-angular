name: Preview Deployment
# Secure deployment of pull request artifacts
# https://securitylab.github.com/research/github-actions-preventing-pwn-requests/
# Changes to this file do not take effect until they are merged into the main / default branch.
on:
  workflow_run:
    workflows: ["Continuous Integration"]
    types: [completed]

permissions:
  pull-requests: write
  packages: write

jobs:
  preview-deployment:
    runs-on: ubuntu-latest
    if: >
      github.event.workflow_run.conclusion == 'success' && (
        github.event.workflow_run.event == 'pull_request' || (
          github.event.workflow_run.event == 'push' &&
          github.event.workflow_run.head_branch == 'main'
        )
      )
    env:
      IMAGE_REPO: ghcr.io/sbb-design-systems/sbb-angular/showcase-preview
      IMAGE_TAG: rev-${{ github.event.workflow_run.head_sha }}
      ALLOWED_EXTENSIONS: css, gitignore, gitkeep, html, ico, jpg, js, json, png, scss, stackblitzrc, svg, ts
    steps:
    - name: Login to GitHub Docker Repository
      uses: azure/docker-login@v1
      with:
        login-server: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - uses: actions/checkout@v3
    - run: rm package.json yarn.lock
    - uses: actions/setup-node@v3
      with:
        node-version: 18
    - run: npm i decompress@4.2.1
    - name: Download Artifacts
      id: artifacts
      uses: actions/github-script@v6
      with:
        script: |
          const decompress = require('decompress');
          const fs = require('fs');
          const path = require('path');

          const artifactsResult = await github.request(context.payload.workflow_run.artifacts_url);
          const artifact = artifactsResult.data.artifacts.find((a) =>
            a.name.startsWith('showcase-artifact-')
          );
          if (artifact) {
            core.info(`Found artifact ${artifact.name}`);
            try {
              const outputPath = './dist/releases/showcase';
              const allowedExtensions = process.env.ALLOWED_EXTENSIONS.split(/[, ]+/g).map(e => `.${e}`);
              const archive = await github.request(artifact.archive_download_url);
              core.info(`Downloaded ${artifact.name}`);
              const zipResult = await decompress(Buffer.from(archive.data), '.');
              core.info(`Decompressed ${artifact.name}:\n${zipResult.map(r => `- ${r.path}`).join('\n')}`);
              fs.mkdirSync(outputPath, { recursive: true });
              const tgzResult = await decompress(zipResult[0].path, outputPath, {
                // Only allow files that are reasonable
                filter: (file) => allowedExtensions.includes(path.extname(file.path)),
                map: (file) => {
                  file.path = file.path.replace(/^package\//, '');
                  return file;
                },
              });
              core.info(`Decompressed ${zipResult[0].path}:\n${tgzResult.map(r => `- ${r.path}`).join('\n')}`);
            } catch (e) {
              core.error(`Failed to download and unzip ${artifact.name}`);
              core.error(e);
            }
          } else {
            core.error(`No artifact found`);
          }
    - run: ls -llR ./dist/releases
    - name: "Docker: Build image"
      run: docker build -t $IMAGE_REPO:$IMAGE_TAG .
    - name: "Docker: Publish image"
      run: docker push $IMAGE_REPO:$IMAGE_TAG
    - name: "Add 'preview-available' label"
      # This label is used for filtering deployments in ArgoCD
      uses: actions-ecosystem/action-add-labels@v1
      with:
        labels: "preview-available"
    - name: Create PR comment
      uses: actions/github-script@v6
      with:
        script: |
          const artifactsResponse = await github.request(context.payload.workflow_run.artifacts_url);
          const showcaseArtifact = artifactsResponse.data.artifacts.find((a) =>
            a.name.startsWith('showcase-artifact-')
          );
          if (showcaseArtifact && context.payload.workflow_run.pull_requests.length) {
            const pullRequest = context.payload.workflow_run.pull_requests[0];

            const { data: fullPr } = await github.rest.pulls.get({
              pull_number: pullRequest.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            // Don't comment renovate bot PRs
            if (fullPr?.user?.login === 'sbb-angular-renovate[bot]') {
              return;
            }

            const previewBaseUrl = `https://sbb-angular-preview-pr${pullRequest.number}.app.sbb.ch`;
            let moduleUrl = '';
            if (fullPr?.title) {
              const moduleName = fullPr.title.match(/^.*\(angular\/(.*)\):/i)?.[1];
              if (moduleName) {
                moduleUrl = `${previewBaseUrl}/angular/components/${moduleName}/examples`;
              }
            }

            const createdAtDate = new Date(
              context.payload.workflow_run.created_at
            ).toLocaleString('de');
            github.rest.issues.createComment({
              issue_number: pullRequest.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Preview ready from ${
                pullRequest.head.sha
              } at ${createdAtDate}:\n- ${previewBaseUrl}${
                moduleUrl ? `\n- Examples link: ${moduleUrl}` : ''
              }`,
            });
          }
