@use 'external/npm/node_modules/@angular/cdk' as cdk;
@use '@sbb-esta/angular' as sbb;

@mixin tab-line-bottom() {
  &::after {
    content: '';
    display: block;
    position: absolute;
    bottom: 0;
    height: 0;
    margin: 0 auto;
    border-bottom: var(--sbb-border-width-thin) solid var(--sbb-color-text);
  }

  :where(html:not(.sbb-lean)) & {
    &::after {
      transition: width var(--sbb-transition-duration-default),
        left var(--sbb-transition-duration-default);
      left: 0;
      right: 0;
      width: 0;
    }
  }

  :where(html.sbb-lean) & {
    &::after {
      left: var(--sbb-border-width-negative);
      right: var(--sbb-border-width-negative);
      border-color: var(--sbb-color-graphite);
    }
  }
}

// Mixin styles for labels that are contained within the tab header.
@mixin tab-label {
  margin-right: sbb.pxToRem(32);
  cursor: pointer;
  box-sizing: border-box;
  text-align: center;
  display: inline-flex;
  justify-content: center;
  align-items: center;
  white-space: nowrap;
  font-family: var(--sbb-font-light);
  font-size: sbb.pxToRem(20);
  color: var(--sbb-color-text);
  line-height: 1em;
  padding-bottom: sbb.pxToRem(20);
  outline: none;

  @include tab-line-bottom;

  :where(html:not(.sbb-lean)) & {
    @include sbb.mq($from: tablet) {
      margin-right: calc(#{sbb.pxToRem(42)} * var(--sbb-scaling-factor));
      font-size: calc(#{sbb.pxToRem(26)} * var(--sbb-scaling-factor));
    }
  }

  :where(html.sbb-lean) & {
    font-size: var(--sbb-font-size);
    line-height: sbb.pxToRem(20);
    padding: sbb.pxToRem(6) sbb.pxToRem(15) sbb.pxToRem(9);
    background-color: var(--sbb-color-background);
    margin-right: 0;
    border: var(--sbb-border-width) solid transparent;
    border-bottom: none;
    border-radius: var(--sbb-border-radius) var(--sbb-border-radius) 0 0;
  }

  &:last-child {
    margin-right: 0 !important;
  }

  &.sbb-tab-label-active {
    :where(html:not(.sbb-lean)) & {
      &::after {
        width: 100%;
      }
    }
    :where(html.sbb-lean) & {
      border-color: var(--sbb-color-graphite);
      &::after {
        display: none;
      }
    }
  }

  &:not(.sbb-tab-label-active):not(.sbb-tab-disabled):is(:focus, :hover) {
    color: var(--sbb-color-call-to-action-hover);

    &::after {
      border-bottom-color: var(--sbb-color-call-to-action-hover);
    }

    :where(html:not(.sbb-lean)) & {
      &::after {
        width: 100%;
      }
    }
  }

  &.sbb-tab-label-active:is(:hover, :focus) {
    color: currentColor;
    cursor: default;
  }

  &.sbb-tab-label-active:focus-visible {
    :where(html.sbb-lean) & {
      outline: var(--sbb-border-width) solid var(--sbb-color-black);
      outline-offset: calc(-1 * var(--sbb-border-width));
    }
  }

  &.sbb-tab-disabled {
    color: var(--sbb-color-storm);

    &:is(:hover, :focus) {
      cursor: default;
    }

    :where(html:not(.sbb-lean)) & {
      &::after {
        width: 0 !important;
      }
    }

    @include cdk.high-contrast(active, off) {
      color: GrayText;
    }
  }

  .sbb-tab-label-content {
    display: inline-flex;
    justify-content: center;
    align-items: center;
    white-space: nowrap;
  }

  // Reserve space for the badge in lean mode.
  .sbb-badge:not(.sbb-badge-hidden) {
    :where(html.sbb-lean) & {
      padding-right: sbb.pxToRem(11);
    }
  }

  // Reduce size of badge in lean mode.
  .sbb-badge-content {
    :where(html.sbb-lean) & {
      transform: scale(0.8);
    }
  }
}

// Structural styles for a tab header. Used by both `sbb-tab-header` and `sbb-tab-nav-bar`.
@mixin paginated-tab-header {
  .sbb-tab-header {
    display: flex;
    overflow: hidden;
    position: relative;
    flex-shrink: 0;
  }

  // The following styles only apply in lean design
  .sbb-tab-header-pagination {
    @include sbb.user-select(none);
    position: relative;
    display: none;
    justify-content: center;
    align-items: center;
    min-width: sbb.pxToRem(32);
    cursor: pointer;
    z-index: 2;
    -webkit-tap-highlight-color: transparent;
    touch-action: none;
    color: var(--sbb-color-granite);

    // Copied shadow from components
    box-shadow: 0 sbb.pxToRem(2) sbb.pxToRem(4) sbb.pxToRem(-1) #0003,
      0 sbb.pxToRem(4) sbb.pxToRem(5) #00000024, 0 sbb.pxToRem(1) sbb.pxToRem(10) #0000001f;

    @include tab-line-bottom;

    .sbb-tab-header-pagination-controls-enabled & {
      display: flex;
    }

    &:hover:not(.sbb-tab-header-pagination-disabled) {
      color: var(--sbb-color-call-to-action-hover);
    }

    &::after {
      right: 0;
      left: 0;
    }

    &.sbb-tab-header-pagination-after.sbb-tab-header-pagination-disabled::after {
      left: sbb.pxToRem(
        -1
      ); // Workaround to overlap 1px gap between right chevron and last tab label
    }
  }

  .sbb-tab-header-pagination-chevron {
    .sbb-tab-header-pagination-disabled & {
      opacity: 0.4;
    }
  }

  .sbb-tab-header-pagination-disabled {
    box-shadow: none;
    cursor: default;
  }

  .sbb-tab-list {
    flex-grow: 1;
    position: relative;
    transition: transform var(--sbb-transition-duration-slow)
      var(--sbb-transition-timing-fast-start);
    will-change: transform; // Avoids flickering in Safari
  }
}

// Styles for scrolling state shadows.
@mixin paginated-tab-header-shadows {
  .sbb-tab-header {
    position: relative;

    :where(html:not(.sbb-lean)) & {
      &::before,
      &::after {
        position: absolute;
        top: 0;
        content: '';
        z-index: 2;
        width: sbb.pxToRem(12);
        height: calc(100% - 0.5rem);
        transition: transform var(--sbb-transition-duration-fast)
          var(--sbb-transition-timing-default);
        pointer-events: none;

        @include sbb.mq($from: tablet) {
          width: calc(#{sbb.pxToRem(24)} * var(--sbb-scaling-factor));
        }
      }

      &::before {
        left: 0;
        transform: translateX(-100%);
        background: linear-gradient(270deg, hsla(0, 0%, 100%, 0.37) 0, var(--sbb-color-background));
      }

      &.sbb-tab-header-left-shadow::before {
        transform: translateX(0);
      }

      &::after {
        right: 0;
        transform: translateX(100%);
        background: linear-gradient(90deg, hsla(0, 0%, 100%, 0.37) 0, var(--sbb-color-background));
      }

      &.sbb-tab-header-right-shadow::after {
        transform: translateX(0);
      }
    }
  }
}

// Structural styles for the element that wraps the paginated header items.
@mixin paginated-tab-header-item-wrapper($parent) {
  display: flex;
  padding-top: calc(#{sbb.pxToRem(2)} * var(--sbb-scaling-factor));

  :where(html.sbb-lean) & {
    padding-top: 0;

    &::after {
      content: '';
      width: 100%;
      flex-grow: 1;
      flex-shrink: 1;
      border-bottom: var(--sbb-border-width) solid var(--sbb-color-graphite);
    }
  }
}

@mixin paginated-tab-header-container {
  display: flex;
  position: relative;
  flex-grow: 1;
  overflow-x: auto;
  z-index: 1;
  padding-bottom: sbb.pxToRem(20);

  :where(html.sbb-lean) & {
    overflow: hidden;
    padding-bottom: 0;
  }
}

@mixin tab-body-wrapper {
  display: block;
  position: relative;
  overflow: hidden;
  transition: height var(--sbb-transition-duration-slow);

  :where(html.sbb-lean) & {
    border: var(--sbb-border-width) solid var(--sbb-color-graphite);
    border-top: none;
    background-color: var(--sbb-color-background);
  }
}
