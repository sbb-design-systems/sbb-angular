@import '../styles/common';

$textColor: $sbbColorGrey;
$textColorLean: $sbbColorIron;

$triggerHeight: 48;

$borderWidth: 2;
$borderWidth4k: 3;
$borderWidth5k: 4;
$borderWidthLean: 1;

$panelWidth: 288;
$panelTriggerPadding: 12;
$panelTriggerPaddingLean: 8;

$imageBaseSize: 30;
$imageBaseSizeLean: 24;

$animationTiming: 300ms cubic-bezier(0.785, 0.135, 0.15, 0.86);

@mixin imageSize() {
  width: pxToRem($imageBaseSize);
  height: pxToRem($imageBaseSize);

  html:not(.sbb-lean) & {
    @include mq($from: desktop4k) {
      width: pxToRem($imageBaseSize * $scalingFactor4k);
      height: pxToRem($imageBaseSize * $scalingFactor4k);
    }

    @include mq($from: desktop5k) {
      width: pxToRem($imageBaseSize * $scalingFactor5k);
      height: pxToRem($imageBaseSize * $scalingFactor5k);
    }
  }

  html.sbb-lean & {
    width: pxToRem($imageBaseSizeLean);
    height: pxToRem($imageBaseSizeLean);
  }
}

.sbb-usermenu {
  display: inline-block;
  max-width: pxToRem($panelWidth);

  html:not(.sbb-lean) & {
    @include mq($from: desktop4k) {
      max-width: pxToRem($panelWidth * $scalingFactor4k);
    }

    @include mq($from: desktop5k) {
      max-width: pxToRem($panelWidth * $scalingFactor5k);
    }
  }
}

.sbb-usermenu-trigger,
.sbb-menu-panel-type-usermenu .sbb-menu-panel-trigger {
  display: flex;
  align-items: center;
  color: $textColor;
  outline: 0;
  width: 100%;
  height: pxToRem($triggerHeight);
  font-size: pxToRem($sizeFontDefault);
  line-height: pxToRem($sizeLineHeightDefault);
  padding: 0 pxToRem($borderWidth);

  &:where(button) {
    cursor: pointer;
  }

  html:not(.sbb-lean) & {
    @include mq($from: desktop4k) {
      height: pxToRem($triggerHeight * $scalingFactor4k);
      font-size: pxToRem($sizeFontDefault4k);
      line-height: pxToRem($sizeLineHeightDefault4k);
      padding: 0 pxToRem($borderWidth4k);
    }

    @include mq($from: desktop5k) {
      height: pxToRem($triggerHeight * $scalingFactor5k);
      font-size: pxToRem($sizeFontDefault5k);
      line-height: pxToRem($sizeLineHeightDefault5k);
      padding: 0 pxToRem($borderWidth5k);
    }
  }

  html.sbb-lean & {
    line-height: pxToRem($sizeLineHeightDefaultLean);
  }

  &:hover,
  &:focus {
    color: $sbbColorRed125;
  }

  // applies to custom icons and arrow icon
  .sbb-icon {
    flex-shrink: 0;
    flex-grow: 0;
  }
}

.sbb-menu-panel-type-usermenu .sbb-menu-panel-trigger {
  // Horizontal divider line
  &::after {
    content: '';
    position: absolute;
    width: 100%;
    left: 0;
    background-color: $sbbColorCloud;
    height: pxToRem(1);
    bottom: pxToRem(-1);
  }

  flex-grow: 0;
  flex-shrink: 0;
  padding: 0 !important; // Overwrite default menu styles
  height: pxToRem($triggerHeight - $borderWidth);

  html:not(.sbb-lean) & {
    @include mq($from: desktop4k) {
      height: pxToRem(($triggerHeight - $borderWidth) * $scalingFactor4k);
    }
    @include mq($from: desktop5k) {
      height: pxToRem(($triggerHeight - $borderWidth) * $scalingFactor5k);
    }
  }

  html.sbb-lean & {
    height: pxToRem($triggerHeight - $borderWidthLean);
  }
}

.sbb-usermenu-logged-out-icon {
  margin-right: pxToRem(4);

  html:not(.sbb-lean) & {
    @include mq($from: desktop4k) {
      margin-right: pxToRem(4 * $scalingFactor4k);
    }

    @include mq($from: desktop5k) {
      margin-right: pxToRem(4 * $scalingFactor5k);
    }
  }
}

.sbb-usermenu-logged-out-label {
  display: none;
  @include mq($from: tablet) {
    display: inline;
  }
}

.sbb-usermenu-identification {
  display: flex;
  flex-grow: 0;
  flex-shrink: 0;
  color: $textColor;

  html.sbb-lean & {
    color: $textColorLean;
  }

  .sbb-menu-panel-wrapper & {
    padding-left: pxToRem($panelTriggerPadding);

    html:not(.sbb-lean) & {
      @include mq($from: desktop4k) {
        padding-left: pxToRem($panelTriggerPadding * $scalingFactor4k);
      }

      @include mq($from: desktop5k) {
        padding-left: pxToRem($panelTriggerPadding * $scalingFactor5k);
      }
    }

    html.sbb-lean & {
      padding-left: pxToRem($panelTriggerPaddingLean);
    }
  }

  img {
    border-radius: 50%;
    border: pxToRem($borderWidth) solid $sbbColorCloud;
    @include imageSize();

    html:not(.sbb-lean) & {
      @include mq($from: desktop4k) {
        border-width: pxToRem($borderWidth4k);
      }

      @include mq($from: desktop5k) {
        border-width: pxToRem($borderWidth5k);
      }
    }

    html.sbb-lean & {
      border-width: pxToRem($borderWidthLean);
    }
  }
}

.sbb-usermenu-initial-letters {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-grow: 0;
  flex-shrink: 0;
  @include imageSize();
  border-radius: 50%;
  background-color: $sbbColorCloud;
  color: $sbbColorMetal;
  font-family: $fontSbbBold;
  font-weight: 700;
  text-align: center;
  font-size: pxToRem(13);

  html:not(.sbb-lean) & {
    line-height: 1;

    @include mq($from: desktop4k) {
      font-size: pxToRem(13 * $scalingFactor4k);
    }

    @include mq($from: desktop5k) {
      font-size: pxToRem(13 * $scalingFactor5k);
    }
  }

  html.sbb-lean & {
    font-size: pxToRem(10);
  }
}

.sbb-usermenu-user-info {
  display: none;
  flex-grow: 1;
  flex-direction: column;
  justify-content: flex-start;
  overflow: hidden;
  color: $textColor;
  padding-left: pxToRem(8);

  html:not(.sbb-lean) & {
    @include mq($from: desktop4k) {
      padding-left: pxToRem(8 * $scalingFactor4k);
    }

    @include mq($from: desktop5k) {
      padding-left: pxToRem(8 * $scalingFactor5k);
    }
  }

  html.sbb-lean & {
    color: $textColorLean;
  }

  .sbb-usermenu-user-info-has-display-name &,
  .sbb-menu-panel-wrapper & {
    display: flex;
  }
}

.sbb-usermenu-user-info-display-name,
.sbb-usermenu-user-info-name {
  display: none;
  text-align: left;
  @include ellipsis();

  .sbb-menu-panel-type-usermenu.ng-animating & {
    text-overflow: clip; // Prevents showing ellipsis during animation
  }
}

.sbb-usermenu-user-info-display-name {
  .sbb-usermenu-user-info-has-display-name & {
    @include mq($from: tablet) {
      display: inline-block;
    }
  }

  .sbb-menu-panel-wrapper & {
    display: inline-block;
  }
}

.sbb-usermenu-user-info-name {
  .sbb-menu-panel-wrapper & {
    display: inline-block;
  }

  color: $sbbColorMetal;
  font-size: pxToRem(13);
  line-height: pxToRem(14);

  html:not(.sbb-lean) & {
    @include mq($from: desktop4k) {
      font-size: pxToRem(13 * $scalingFactor4k);
      line-height: pxToRem(14 * $scalingFactor4k);
    }

    @include mq($from: desktop5k) {
      font-size: pxToRem(13 * $scalingFactor5k);
      line-height: pxToRem(14 * $scalingFactor5k);
    }
  }

  html.sbb-lean & {
    color: $textColorLean;
  }
}

.sbb-usermenu-arrow.sbb-icon {
  display: none;
  flex-shrink: 0;
  flex-grow: 0;
  margin-right: pxToRem(8);
  transition: transform $animationTiming;

  @include mq($from: tablet) {
    display: inline-block;
  }
  .sbb-overlay-panel & {
    display: inline-block;
  }

  html.sbb-lean & {
    margin-left: pxToRem(8);
    transform: rotate(90deg);
  }

  .sbb-menu-trigger-menu-open &,
  .sbb-menu-panel-wrapper & {
    transform: rotate(-180deg);

    html.sbb-lean & {
      transform: rotate(-90deg);
    }
  }

  .sbb-menu-panel-wrapper & {
    @keyframes arrowRotate {
      0% {
        transform: rotate(0);
      }
      100% {
        transform: rotate(-180deg);
      }
    }
    animation: $animationTiming 0s 1 arrowRotate;

    html.sbb-lean & {
      @keyframes arrowRotateLean {
        0% {
          transform: rotate(90deg);
        }
        100% {
          transform: rotate(-90deg);
        }
      }
      animation: $animationTiming 0s 1 arrowRotateLean;
    }
  }

  .sbb-menu-panel-wrapper.sbb-menu-panel-closing & {
    @keyframes arrowRotateBackwards {
      0% {
        transform: rotate(-180deg);
      }
      100% {
        transform: rotate(0);
      }
    }
    animation: $animationTiming 0s 1 arrowRotateBackwards;

    html.sbb-lean & {
      @keyframes arrowRotateBackwardsLean {
        0% {
          transform: rotate(-90deg);
        }
        100% {
          transform: rotate(90deg);
        }
      }
      animation: $animationTiming 0s 1 arrowRotateBackwardsLean;
    }
  }

  html:not(.sbb-lean) & {
    @include mq($from: desktop4k) {
      margin-right: pxToRem(8 * $scalingFactor4k);
    }

    @include mq($from: desktop5k) {
      margin-right: pxToRem(8 * $scalingFactor5k);
    }
  }
}

.sbb-menu-panel-wrapper.sbb-menu-panel-type-usermenu {
  max-width: 100%;
  position: absolute;
  right: 0;
  --sbb-menu-trigger-width: #{pxToRem(48)}; // Only fallback, will normally be defined programmatically
  --sbb-menu-trigger-height: #{pxToRem(48)}; // Only fallback, will normally be defined programmatically
  min-width: calc(var(--sbb-menu-trigger-width) + #{pxToRem($panelTriggerPadding)});
  min-height: var(--sbb-menu-trigger-height);

  html:not(.sbb-lean) & {
    @include mq($from: desktop4k) {
      min-width: calc(
        var(--sbb-menu-trigger-width) + #{pxToRem($panelTriggerPadding * $scalingFactor4k)}
      );
      min-height: calc(var(--sbb-menu-trigger-height) * #{$scalingFactor4k});
    }
    @include mq($from: desktop5k) {
      min-width: calc(
        var(--sbb-menu-trigger-width) + #{pxToRem($panelTriggerPadding * $scalingFactor5k)}
      );
      min-height: calc(var(--sbb-menu-trigger-height) * #{$scalingFactor5k});
    }
  }

  html.sbb-lean & {
    min-width: calc(var(--sbb-menu-trigger-width) + #{pxToRem($panelTriggerPaddingLean)});
  }

  .sbb-menu-item {
    min-width: pxToRem($panelWidth - 2 * $borderWidth);

    html:not(.sbb-lean) & {
      @include mq($from: desktop4k) {
        min-width: pxToRem(($panelWidth * $scalingFactor4k) - 2 * $borderWidth4k);
      }

      @include mq($from: desktop5k) {
        min-width: pxToRem(($panelWidth * $scalingFactor5k) - 2 * $borderWidth5k);
      }
    }

    html.sbb-lean & {
      min-width: pxToRem($panelWidth - 2 * $borderWidthLean);
    }
  }

  &.ng-animating {
    .sbb-panel {
      overflow: hidden; // Disable scroll bars during animation
    }

    &.sbb-menu-panel-closing .sbb-panel {
      padding: 0;
      transition: padding $animationTiming;
    }
  }
}
