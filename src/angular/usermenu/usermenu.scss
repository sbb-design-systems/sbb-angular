@import '../styles/common';

$textColor: $sbbColorGrey;
$textColorLean: $sbbColorIron;

$triggerHeight: 48;

$borderWidth: 2;
$borderWidth4k: 3;
$borderWidth5k: 4;
$borderWidthLean: 1;

$panelWidth: 288;
$panelWidth4k: $panelWidth * $scalingFactor4k;
$panelWidth5k: $panelWidth * $scalingFactor5k;

$imageBaseSize: 30;
$imageBaseSizeLean: 24;

@mixin imageSize() {
  width: pxToRem($imageBaseSize);
  height: pxToRem($imageBaseSize);

  html:not(.sbb-lean) & {
    @include mq($from: desktop4k) {
      width: pxToRem($imageBaseSize * $scalingFactor4k);
      height: pxToRem($imageBaseSize * $scalingFactor4k);
    }

    @include mq($from: desktop5k) {
      width: pxToRem($imageBaseSize * $scalingFactor5k);
      height: pxToRem($imageBaseSize * $scalingFactor5k);
    }
  }

  html.sbb-lean & {
    width: pxToRem($imageBaseSizeLean);
    height: pxToRem($imageBaseSizeLean);
  }
}

.sbb-usermenu {
  display: inline-block;
  max-width: pxToRem($panelWidth);

  html:not(.sbb-lean) & {
    @include mq($from: desktop4k) {
      max-width: pxToRem($panelWidth4k);
    }

    @include mq($from: desktop5k) {
      max-width: pxToRem($panelWidth5k);
    }
  }
}

.sbb-usermenu-trigger {
  display: flex;
  align-items: center;
  height: pxToRem($triggerHeight);
  color: $textColor;
  cursor: pointer;
  outline: 0;
  font-size: 1rem;
  width: 100%;
  padding: 0 pxToRem($borderWidth);

  html:not(.sbb-lean) & {
    @include mq($from: desktop4k) {
      height: pxToRem($triggerHeight * $scalingFactor4k);
      font-size: pxToRem($sizeFontDefault4k);
      padding: 0 pxToRem($borderWidth4k);
    }

    @include mq($from: desktop5k) {
      height: pxToRem($triggerHeight * $scalingFactor5k);
      font-size: pxToRem($sizeFontDefault5k);
      padding: 0 pxToRem($borderWidth5k);
    }
  }

  &:hover,
  &:focus {
    color: $sbbColorRed125;
  }

  // applies to custom icons and arrow icon
  .sbb-icon {
    width: pxToRem(24);
    height: pxToRem(24);
    flex-shrink: 0;
    flex-grow: 0;

    svg {
      width: 100%;
      height: 100%;
    }

    html:not(.sbb-lean) & {
      @include mq($from: desktop4k) {
        height: pxToRem(24 * $scalingFactor4k);
        width: pxToRem(24 * $scalingFactor4k);
      }

      @include mq($from: desktop5k) {
        height: pxToRem(24 * $scalingFactor5k);
        width: pxToRem(24 * $scalingFactor5k);
      }
    }
  }

  .sbb-usermenu-panel & {
    height: pxToRem($triggerHeight - $borderWidth);
    box-shadow: 0 pxToRem(1) 0 0 $sbbColorCloud; // horizontal line
    flex-grow: 0;
    flex-shrink: 0;
    padding: 0;
    margin-top: pxToRem(private-div(-$borderWidth, 2));
    margin-bottom: pxToRem(10);

    html:not(.sbb-lean) & {
      @include mq($from: desktop4k) {
        height: pxToRem(($triggerHeight - $borderWidth) * $scalingFactor4k);
        box-shadow: 0 pxToRem($scalingFactor4k) 0 0 $sbbColorCloud; // horizontal line
        margin-top: pxToRem(private-div(-$borderWidth4k, 2));
        margin-bottom: pxToRem(10 * $scalingFactor4k);
      }

      @include mq($from: desktop5k) {
        height: pxToRem(($triggerHeight - $borderWidth) * $scalingFactor5k);
        box-shadow: 0 pxToRem($scalingFactor5k) 0 0 $sbbColorCloud; // horizontal line
        margin-top: pxToRem(private-div(-$borderWidth5k, 2));
        margin-bottom: pxToRem(10 * $scalingFactor5k);
      }
    }

    html.sbb-lean & {
      height: pxToRem($triggerHeight - $borderWidthLean);
      margin-top: pxToRem(private-div(-$borderWidthLean, 2));
      margin-bottom: pxToRem(4);
    }

    .sbb-icon:not(.sbb-usermenu-arrow) {
      $padding: private-div(($imageBaseSize - 24), 2);
      margin: 0 pxToRem($padding);

      html:not(.sbb-lean) & {
        @include mq($from: desktop4k) {
          margin: 0 pxToRem($padding * $scalingFactor4k);
        }

        @include mq($from: desktop5k) {
          margin: 0 pxToRem($padding * $scalingFactor5k);
        }
      }

      html.sbb-lean & {
        margin: 0;
      }
    }
  }
}

.sbb-usermenu-logged-out-icon {
  margin-right: pxToRem(4);

  html:not(.sbb-lean) & {
    @include mq($from: desktop4k) {
      margin-right: pxToRem(4 * $scalingFactor4k);
    }

    @include mq($from: desktop5k) {
      margin-right: pxToRem(4 * $scalingFactor5k);
    }
  }
}

.sbb-usermenu-logged-out-label {
  display: none;
  @include mq($from: tablet) {
    display: inline;
  }
}

.sbb-usermenu-identification {
  display: flex;
  flex-grow: 0;
  flex-shrink: 0;
  color: $textColor;

  html.sbb-lean & {
    color: $textColorLean;
  }

  .sbb-usermenu-panel & {
    padding-left: pxToRem(12);

    html:not(.sbb-lean) & {
      @include mq($from: desktop4k) {
        padding-left: pxToRem(12 * $scalingFactor4k);
      }

      @include mq($from: desktop5k) {
        padding-left: pxToRem(12 * $scalingFactor5k);
      }
    }

    html.sbb-lean & {
      padding-left: pxToRem(8);
    }
  }

  img {
    border-radius: 50%;
    border: pxToRem($borderWidth) solid $sbbColorCloud;
    @include imageSize();

    html:not(.sbb-lean) & {
      @include mq($from: desktop4k) {
        border-width: pxToRem($borderWidth4k);
      }

      @include mq($from: desktop5k) {
        border-width: pxToRem($borderWidth5k);
      }
    }

    html.sbb-lean & {
      border-width: pxToRem($borderWidthLean);
    }
  }
}

.sbb-usermenu-initial-letters {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-grow: 0;
  flex-shrink: 0;
  @include imageSize();
  border-radius: 50%;
  background-color: $sbbColorCloud;
  color: $sbbColorMetal;
  font-family: $fontSbbBold;
  font-weight: 700;
  text-align: center;
  font-size: pxToRem(13);

  html:not(.sbb-lean) & {
    line-height: 1;

    @include mq($from: desktop4k) {
      font-size: pxToRem(13 * $scalingFactor4k);
    }

    @include mq($from: desktop5k) {
      font-size: pxToRem(13 * $scalingFactor5k);
    }
  }

  html.sbb-lean & {
    font-size: pxToRem(10);
  }
}

.sbb-usermenu-user-info {
  display: none;
  flex-grow: 1;
  flex-direction: column;
  justify-content: flex-start;
  overflow: hidden;
  color: $textColor;
  padding-left: pxToRem(8);

  html:not(.sbb-lean) & {
    @include mq($from: desktop4k) {
      padding-left: pxToRem(8 * $scalingFactor4k);
    }

    @include mq($from: desktop5k) {
      padding-left: pxToRem(8 * $scalingFactor5k);
    }
  }

  html.sbb-lean & {
    color: $textColorLean;
  }

  .sbb-usermenu-user-info-has-display-name &,
  .sbb-usermenu-panel & {
    display: flex;
  }
}

.sbb-usermenu-user-info-display-name,
.sbb-usermenu-user-info-name {
  display: none;
  text-align: left;
  @include ellipsis();
}

.sbb-usermenu-user-info-display-name {
  .sbb-usermenu-user-info-has-display-name & {
    @include mq($from: tablet) {
      display: inline-block;
    }
  }

  .sbb-usermenu-panel & {
    display: inline-block;
  }
}

.sbb-usermenu-user-info-name {
  .sbb-usermenu-panel & {
    display: inline-block;
  }

  color: $sbbColorMetal;
  font-size: pxToRem(13);
  line-height: pxToRem(14);

  html:not(.sbb-lean) & {
    @include mq($from: desktop4k) {
      font-size: pxToRem(13 * $scalingFactor4k);
      line-height: pxToRem(14 * $scalingFactor4k);
    }

    @include mq($from: desktop5k) {
      font-size: pxToRem(13 * $scalingFactor5k);
      line-height: pxToRem(14 * $scalingFactor5k);
    }
  }

  html.sbb-lean & {
    color: $sbbColorIron;
  }
}

.sbb-usermenu-arrow.sbb-icon {
  display: none;
  flex-shrink: 0;
  flex-grow: 0;
  margin-right: pxToRem(8);
  transition: transform 300ms cubic-bezier(0.785, 0.135, 0.15, 0.86);

  @include mq($from: tablet) {
    display: inline-block;
  }
  .sbb-overlay-panel & {
    display: inline-block;
  }

  html.sbb-lean & {
    margin-left: pxToRem(8);
    transform: rotate(90deg);
  }

  .sbb-usermenu-opened & {
    transform: rotate(-180deg);

    html.sbb-lean & {
      transform: rotate(-90deg);
    }
  }

  html:not(.sbb-lean) & {
    @include mq($from: desktop4k) {
      margin-right: pxToRem(8 * $scalingFactor4k);
    }

    @include mq($from: desktop5k) {
      margin-right: pxToRem(8 * $scalingFactor5k);
    }
  }
}

.sbb-usermenu-panel {
  box-shadow: boxShadow(1, $borderWidth, 1);
  position: absolute !important; // Overwrite sbb-panel styles in all sizes
  right: 0;
  top: 0 !important; // Overwrite sbb-panel styles in all sizes
  overflow-y: hidden;
  max-width: 100%;
  border-radius: pxToRem(2);
  display: flex;
  flex-direction: column;
  padding-top: 0 !important; // Overwrite sbb-panel-padded styles
  border-top: pxToRem($borderWidth) solid $sbbColorGrey;

  html:not(.sbb-lean) & {
    @include mq($from: desktop4k) {
      box-shadow: boxShadow(1, $borderWidth4k, $scalingFactor4k);
      border-radius: pxToRem(2 * $scalingFactor4k);
      border-top-width: pxToRem($borderWidth4k);
    }
    @include mq($from: desktop5k) {
      box-shadow: boxShadow(1, $borderWidth5k, $scalingFactor5k);
      border-radius: pxToRem(2 * $scalingFactor5k);
      border-top-width: pxToRem($borderWidth5k);
    }
  }

  html.sbb-lean & {
    box-shadow: boxShadow(1, $borderWidthLean, 1);
    border-top: pxToRem($borderWidthLean) solid $sbbColorIron;
  }
}

.sbb-usermenu-inner-panel {
  min-width: pxToRem($panelWidth - 2 * $borderWidth);
  overflow-y: auto;

  html:not(.sbb-lean) & {
    @include mq($from: desktop4k) {
      min-width: pxToRem($panelWidth4k - 2 * $borderWidth4k);
    }

    @include mq($from: desktop5k) {
      min-width: pxToRem($panelWidth5k - 2 * $borderWidth5k);
    }
  }

  html.sbb-lean & {
    min-width: pxToRem($panelWidth - 2 * $borderWidthLean);
  }

  .sbb-usermenu-panel.ng-animating & {
    overflow-y: hidden;
  }
}

.sbb-usermenu-item {
  width: 100%;
}
