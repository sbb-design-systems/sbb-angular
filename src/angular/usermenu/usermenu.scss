@import '../styles/common';
/**
$textColor: if($sbbBusiness, $sbbColorIron, $sbbColorGrey);

$triggerHeight: 48px;

$borderWidth: if($sbbBusiness, 1px, 2px);
$borderWidth4k: 3px;
$borderWidth5k: 4px;

$panelWidth: 288px;
$panelWidth4k: toPx($panelWidth * $scalingFactor4k);
$panelWidth5k: toPx($panelWidth * $scalingFactor5k);

$imageBaseSize: if($sbbBusiness, 24, 30);

@mixin imageSize() {
  width: toPx($imageBaseSize);
  height: toPx($imageBaseSize);

  @include publicOnly() {
    @include mq($from: desktop4k) {
      width: toPx($imageBaseSize * $scalingFactor4k);
      height: toPx($imageBaseSize * $scalingFactor4k);
    }

    @include mq($from: desktop5k) {
      width: toPx($imageBaseSize * $scalingFactor5k);
      height: toPx($imageBaseSize * $scalingFactor5k);
    }
  }
}

.sbb-usermenu {
  display: inline-block;
  max-width: $panelWidth;

  @include publicOnly() {
    @include mq($from: desktop4k) {
      max-width: $panelWidth4k;
    }

    @include mq($from: desktop5k) {
      max-width: $panelWidth5k;
    }
  }
}

.sbb-usermenu-trigger {
  @include buttonResetFrameless;
  display: flex;
  align-items: center;
  height: pxToRem($triggerHeight);
  color: $textColor;
  cursor: pointer;
  outline: 0;
  font-size: 1rem;
  width: 100%;
  padding: 0 pxToRem($borderWidth);

  @include publicOnly() {
    @include mq($from: desktop4k) {
      height: pxToRem($triggerHeight * $scalingFactor4k);
      font-size: 1.5rem;
      padding: 0 pxToRem($borderWidth4k);
    }

    @include mq($from: desktop5k) {
      height: pxToRem($triggerHeight * $scalingFactor5k);
      font-size: 2rem;
      padding: 0 pxToRem($borderWidth5k);
    }
  }

  &:hover,
  &:focus {
    color: $sbbColorRed125;
  }

  // applies to custom icons and arrow icon
  .sbb-icon {
    width: 24px;
    height: 24px;
    flex-shrink: 0;
    flex-grow: 0;

    svg {
      width: 100%;
      height: 100%;
    }

    @include publicOnly() {
      @include mq($from: desktop4k) {
        height: toPx(24 * $scalingFactor4k);
        width: toPx(24 * $scalingFactor4k);
      }

      @include mq($from: desktop5k) {
        height: toPx(24 * $scalingFactor5k);
        width: toPx(24 * $scalingFactor5k);
      }
    }
  }

  .sbb-usermenu-panel & {
    height: pxToRem($triggerHeight - $borderWidth);
    box-shadow: 0 pxToRem(1) 0 0 $sbbColorCloud; // horizontal line
    flex-grow: 0;
    flex-shrink: 0;
    padding: 0;
    margin-top: pxToRem(private-div(-$borderWidth, 2));

    @include publicOnly() {
      @include mq($from: desktop4k) {
        height: pxToRem(($triggerHeight - $borderWidth) * $scalingFactor4k);
        box-shadow: 0 pxToRem($scalingFactor4k) 0 0 $sbbColorCloud; // horizontal line
        margin-top: pxToRem(private-div(-$borderWidth4k, 2));
      }

      @include mq($from: desktop5k) {
        height: pxToRem(($triggerHeight - $borderWidth) * $scalingFactor5k);
        box-shadow: 0 pxToRem($scalingFactor5k) 0 0 $sbbColorCloud; // horizontal line
        margin-top: pxToRem(private-div(-$borderWidth5k, 2));
      }
    }

    .sbb-icon:not(.sbb-usermenu-arrow) {
      $padding: private-div(($imageBaseSize - 24), 2);
      margin: 0 pxToRem($padding);

      @include publicOnly() {
        @include mq($from: desktop4k) {
          margin: 0 pxToRem($padding * $scalingFactor4k);
        }

        @include mq($from: desktop5k) {
          margin: 0 pxToRem($padding * $scalingFactor5k);
        }
      }
    }
  }
}

.sbb-usermenu-logged-out-icon {
  margin-right: pxToRem(4);

  @include publicOnly() {
    @include mq($from: desktop4k) {
      margin-right: pxToRem(4 * $scalingFactor4k);
    }

    @include mq($from: desktop5k) {
      margin-right: pxToRem(4 * $scalingFactor5k);
    }
  }
}

.sbb-usermenu-logged-out-label {
  display: none;
  @include mq($from: tablet) {
    display: inline;
  }
}

.sbb-usermenu-identification {
  display: flex;
  flex-grow: 0;
  flex-shrink: 0;
  color: $textColor;

  .sbb-usermenu-panel & {
    padding-left: pxToRem(if($sbbBusiness, 8, 12));

    @include publicOnly() {
      @include mq($from: desktop4k) {
        padding-left: pxToRem(12 * $scalingFactor4k);
      }

      @include mq($from: desktop5k) {
        padding-left: pxToRem(12 * $scalingFactor5k);
      }
    }
  }

  img {
    border-radius: 50%;
    border: $borderWidth solid $sbbColorCloud;
    @include imageSize();

    @include publicOnly() {
      @include mq($from: desktop4k) {
        border: $borderWidth4k solid $sbbColorCloud;
      }

      @include mq($from: desktop5k) {
        border: $borderWidth5k solid $sbbColorCloud;
      }
    }
  }
}

.sbb-usermenu-initial-letters {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-grow: 0;
  flex-shrink: 0;
  @include imageSize();
  border-radius: 50%;
  background-color: $sbbColorCloud;
  color: $sbbColorMetal;
  font-family: $fontSbbBold;
  font-weight: 700;
  text-align: center;
  font-size: pxToRem(if($sbbBusiness, 10, 13));

  @include publicOnly() {
    line-height: 1;

    @include mq($from: desktop4k) {
      font-size: pxToRem(13 * $scalingFactor4k);
    }

    @include mq($from: desktop5k) {
      font-size: pxToRem(13 * $scalingFactor5k);
    }
  }
}

.sbb-usermenu-user-info {
  display: none;
  flex-grow: 1;
  flex-direction: column;
  justify-content: flex-start;
  overflow: hidden;
  color: $textColor;
  padding-left: pxToRem(8);

  @include publicOnly() {
    @include mq($from: desktop4k) {
      padding-left: pxToRem(8 * $scalingFactor4k);
    }

    @include mq($from: desktop5k) {
      padding-left: pxToRem(8 * $scalingFactor5k);
    }
  }

  .sbb-usermenu-user-info-has-display-name &,
  .sbb-usermenu-panel & {
    display: flex;
  }
}

.sbb-usermenu-user-info-display-name,
.sbb-usermenu-user-info-name {
  display: none;
  text-align: left;
  @include ellipsis();
}

.sbb-usermenu-user-info-display-name {
  .sbb-usermenu-user-info-has-display-name & {
    @include mq($from: tablet) {
      display: inline-block;
    }
  }

  .sbb-usermenu-panel & {
    display: inline-block;
  }
}

.sbb-usermenu-user-info-name {
  .sbb-usermenu-panel & {
    display: inline-block;
  }

  color: if($sbbBusiness, $sbbColorIron, $sbbColorMetal);
  font-size: pxToRem(13);
  line-height: pxToRem(14);

  @include publicOnly() {
    @include mq($from: desktop4k) {
      font-size: pxToRem(13 * $scalingFactor4k);
      line-height: pxToRem(14 * $scalingFactor4k);
    }

    @include mq($from: desktop5k) {
      font-size: pxToRem(13 * $scalingFactor5k);
      line-height: pxToRem(14 * $scalingFactor5k);
    }
  }
}

.sbb-usermenu-arrow.sbb-icon {
  display: none;
  flex-shrink: 0;
  flex-grow: 0;
  margin-right: pxToRem(8);
  @if $sbbBusiness {
    margin-left: pxToRem(8);
  }
  transition: transform 300ms cubic-bezier(0.785, 0.135, 0.15, 0.86);

  @include mq($from: tablet) {
    display: inline-block;
  }
  .sbb-overlay-panel & {
    display: inline-block;
  }

  @if $sbbBusiness {
    transform: rotate(90deg);
  }
  .sbb-usermenu-opened & {
    transform: rotate(if($sbbBusiness, -90deg, -180deg));
  }

  @include publicOnly() {
    @include mq($from: desktop4k) {
      margin-right: pxToRem(8 * $scalingFactor4k);
    }

    @include mq($from: desktop5k) {
      margin-right: pxToRem(8 * $scalingFactor5k);
    }
  }
}

.sbb-usermenu-panel {
  @include autocompleteBase();
  box-shadow: autocompleteBoxShadow(1, 1);
  position: absolute;
  right: 0;
  overflow-y: hidden;
  max-width: 100%;
  border-radius: $autocompleteBorderRadius;
  display: flex;
  flex-direction: column;

  @include publicOnly() {
    @include mq($from: desktop4k) {
      box-shadow: autocompleteBoxShadow(1, $scalingFactor4k);
      border-radius: $autocompleteBorderRadius * $scalingFactor4k;
    }
    @include mq($from: desktop5k) {
      box-shadow: autocompleteBoxShadow(1, $scalingFactor5k);
      border-radius: $autocompleteBorderRadius * $scalingFactor5k;
    }
  }

  hr {
    margin: pxToRem(4) 0;
    padding: 0;
    border: none;
    border-top: solid 1px $sbbColorCloud;
  }
}

.sbb-usermenu-inner-panel {
  min-width: toPx($panelWidth - 2 * $borderWidth);
  overflow-y: auto;

  .sbb-usermenu-panel.ng-animating & {
    overflow-y: hidden;
  }

  @include publicOnly() {
    @include mq($from: desktop4k) {
      min-width: toPx($panelWidth4k - 2 * $borderWidth4k);
    }

    @include mq($from: desktop5k) {
      min-width: toPx($panelWidth5k - 2 * $borderWidth5k);
    }
  }
}

.sbb-usermenu-item {
  @include buttonResetFrameless;
  @include optionBase;
  width: 100%;

  &[disabled] {
    cursor: default;
    opacity: 0.5;
    user-select: none;
  }
}
*/
