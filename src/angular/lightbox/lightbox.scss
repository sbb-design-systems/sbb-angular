@use 'external/npm/node_modules/@angular/cdk' as cdk;
@use '@sbb-esta/angular' as sbb;

.sbb-overlay-background {
  background-color: var(--sbb-color-white-alpha70);
  align-items: center;
}

.sbb-lightbox-container {
  display: flex;
  flex-direction: column;
  box-sizing: border-box;
  overflow: hidden;
  outline: 0;
  background-color: var(--sbb-color-background);

  // The dialog container width should completely fill its parent overlay element.
  width: 100%;
  height: 100%;

  @include cdk.high-contrast(active, off) {
    outline: solid sbb.pxToRem(1);
  }
}

// When using lightbox with a component, the component element is placed as a
// single element inside the container.
.sbb-lightbox-container > *:only-child:not(.sbb-lightbox-content) {
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
}

.sbb-lightbox-content {
  display: block;
  padding: var(--sbb-divider-big) var(--sbb-lightbox-padding-horizontal);
  flex: 1 1 auto;
  overflow: auto;
  -webkit-overflow-scrolling: touch;

  // Remove the top margin from the first element inside the content.
  > *:first-child {
    margin-top: 0;
  }
}

.sbb-lightbox-title {
  // The right padding considers original padding, plus additional padding
  // to not let text touch the icon.
  padding: calc(#{sbb.pxToRem(21)} * var(--sbb-scaling-factor)) sbb.pxToRem(56)
    calc(#{sbb.pxToRem(17)} * var(--sbb-scaling-factor)) sbb.pxToRem(20);
  flex: 0 0 auto;
  font-size: var(--sbb-font-size);
  line-height: var(--sbb-line-height);
  display: block;
  position: relative;
  box-shadow: var(--sbb-box-shadow-horizontal-border-top);
  @include sbb.ellipsis;
  min-height: calc(#{sbb.pxToRem(64)} * var(--sbb-scaling-factor)); // Supports empty title

  @include sbb.mq($from: tablet) {
    padding-left: sbb.pxToRem(24);
    // The right padding considers original padding, plus additional padding
    // to not let text touch the icon.
    padding-right: sbb.pxToRem(60);
  }
  @include sbb.mq($from: desktop) {
    padding-left: calc(#{sbb.pxToRem(80)} * var(--sbb-scaling-factor));
    // The right padding considers original padding, plus additional padding
    // to not let text touch the icon.
    padding-right: calc(#{sbb.pxToRem(92)} * var(--sbb-scaling-factor));
  }
  :where(html:not(.sbb-lean)) & {
    @include sbb.mq($from: desktop4k, $to: desktop5k) {
      padding-top: sbb.pxToRem(28);
      padding-bottom: sbb.pxToRem(28);
    }
  }
}

.sbb-lightbox-title-close-button {
  position: absolute;
  right: sbb.pxToRem(20);
  cursor: pointer;
  line-height: 0;
  color: var(--sbb-color-storm);
  outline: 0;

  &:is(:hover, :focus) {
    color: var(--sbb-color-call-to-action-hover);
  }

  @include sbb.mq($from: tablet) {
    right: sbb.pxToRem(24);
  }
  @include sbb.mq($from: desktop) {
    right: calc(#{sbb.pxToRem(56)} * var(--sbb-scaling-factor));
  }
}

.sbb-lightbox-actions {
  padding: var(--sbb-lightbox-actions-padding-vertical) var(--sbb-lightbox-padding-horizontal);
  display: flex;
  flex: 0 0 auto;
  flex-flow: column wrap;
  gap: var(--sbb-button-gap);
  align-items: center;
  justify-content: space-between;

  // Explicitly set a box-sizing since people commonly set `border-box`
  // on all elements which will break the height of the lightbox actions.
  box-sizing: content-box;
  box-shadow: var(--sbb-box-shadow-horizontal-border-bottom);

  @include sbb.mq($from: tablet) {
    flex-direction: row;
  }
}
