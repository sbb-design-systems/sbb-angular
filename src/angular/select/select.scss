@import '../styles/common';

.sbb-select {
  display: inline-block;
  cursor: pointer;
  position: relative;
  text-align: left; // Used to be table header compatible where `center` is the default

  padding-right: calc(#{pxToRem(44)} * var(--sbb-scaling-factor));

  :where(html.sbb-lean) & {
    padding-right: pxToRem(38);
  }

  &:is([readonly], .sbb-readonly) {
    cursor: default;
  }

  // Prevent weird spacing behavior when nested in sbb-form-field or table, by declaring it as a
  // block element. In the case of sbb-form-field, it takes up the available space defined by the wrapper.
  .sbb-form-field &,
  .sbb-table th.sbb-header-cell.sbb-table-filter & {
    display: block;
  }
}

.sbb-select-value {
  overflow: hidden;
  text-overflow: ellipsis;
}

// Used when setting a placeholder
:where(html.sbb-lean) .sbb-select-value-empty {
  color: var(--sbb-color-storm);
}

.sbb-select-arrow-icon {
  @include absoluteCenterY();
  right: calc(#{pxToRem(9)} * var(--sbb-scaling-factor));
  color: var(--sbb-color-grey);

  :where(html.sbb-lean) & {
    right: pxToRem(6);
  }

  .sbb-select:is([readonly], .sbb-readonly) & {
    display: none;
  }
}

.sbb-select-arrow-icon > svg {
  transition: transform 120ms cubic-bezier(0, 0, 0.2, 1);

  .sbb-input-with-open-panel & {
    transform: rotate(180deg);
  }
}

.sbb-icon.sbb-select-arrow-icon-lean > svg {
  transform: rotate(90deg);
  .sbb-input-with-open-panel & {
    transform: rotate(-90deg);
  }
}

.sbb-select-panel {
  :is(.sbb-menu-group + .sbb-menu-group, .sbb-menu-item + .sbb-menu-group, .sbb-menu-group
      + .sbb-menu-item) {
    border-top: none;
  }

  :where(html:not(.sbb-lean)) &.sbb-select-multiple .sbb-menu-group .sbb-menu-item {
    padding-left: calc(#{pxToRem(14)} * var(--sbb-scaling-factor));
  }
}
