import {
  ChangeDetectionStrategy,
  ChangeDetectorRef,
  Component,
  Input,
  OnDestroy,
  TemplateRef,
  ViewChild,
  ViewContainerRef,
  ViewEncapsulation,
} from '@angular/core';

import { SbbGhettoboxConfig } from './ghettobox-config';
import { SbbGhettoboxRef, SbbGhettoboxRefConnector } from './ghettobox-ref';
import { SbbGhettoboxService } from './ghettobox-service';

let nextId = 0;

/**
 * This component is used for handle a collection of ghettoboxes via the GhettoboxService.
 */
@Component({
  selector: 'sbb-ghettobox-outlet',
  templateUrl: './ghettobox-outlet.html',
  changeDetection: ChangeDetectionStrategy.OnPush,
  encapsulation: ViewEncapsulation.None,
  host: {
    class: 'sbb-ghettobox-outlet',
    '[id]': 'id',
    role: 'region',
    'aria-live': 'assertive',
    'aria-relevant': 'all',
    tabindex: '-1',
  },
})
export class SbbGhettoboxOutlet implements OnDestroy {
  @Input() id: string = `sbb-ghettobox-outlet-${nextId++}`;

  /** The portal where to attach the ghettoboxes generated by the service. */
  @ViewChild('outlet', { static: true, read: ViewContainerRef }) _outletRef: ViewContainerRef;

  @ViewChild('standard', { static: true }) _templateStandard: TemplateRef<any>;
  @ViewChild('routerLink', { static: true }) _templateRouterLink: TemplateRef<any>;
  @ViewChild('externalLink', { static: true }) _templateExternalLink: TemplateRef<any>;

  constructor(
    private _ghettoboxService: SbbGhettoboxService,
    private _changeDetectorRef: ChangeDetectorRef
  ) {
    this._ghettoboxService._register(this);
  }

  ngOnDestroy() {
    this._ghettoboxService._unregister(this);
  }

  /** Creates a new ComponentPortal of GhettoboxComponent and attach it to the cdkPortalOutlet */
  createGhettobox(message: string, config: SbbGhettoboxConfig): SbbGhettoboxRef {
    const template = this._selectTemplate(config);
    const connector = new SbbGhettoboxRefConnector(message, config);
    const ref = new SbbGhettoboxRef(this, connector);
    ref.instance = this._outletRef.createEmbeddedView(template, { connector });
    this._changeDetectorRef.markForCheck();
    return ref;
  }

  /** Dismisss all ghettobox instances from this outlet. */
  dismissAll() {
    this._outletRef.clear();
  }

  private _selectTemplate(config: SbbGhettoboxConfig) {
    if (config.link) {
      return this._templateExternalLink;
    } else if (config.routerLink) {
      return this._templateRouterLink;
    }

    return this._templateStandard;
  }
}
