@use 'external/npm/node_modules/@angular/cdk' as cdk;
@import './common';

// ----------------------------------------------------------------------------------------------------
// Custom Webfonts
// ----------------------------------------------------------------------------------------------------

@font-face {
  font-family: 'SBBWeb Bold';
  src: url('https://cdn.app.sbb.ch/fonts/v1_6_subset/SBBWeb-Bold.woff2') format('woff2'),
    url('https://cdn.app.sbb.ch/fonts/v1_6_subset/SBBWeb-Bold.woff') format('woff');
  font-display: swap;
}

@font-face {
  font-family: 'SBBWeb Light';
  src: url('https://cdn.app.sbb.ch/fonts/v1_6_subset/SBBWeb-Light.woff2') format('woff2'),
    url('https://cdn.app.sbb.ch/fonts/v1_6_subset/SBBWeb-Light.woff') format('woff');
  font-display: swap;
}

@font-face {
  font-family: 'SBBWeb Roman';
  src: url('https://cdn.app.sbb.ch/fonts/v1_6_subset/SBBWeb-Roman.woff2') format('woff2'),
    url('https://cdn.app.sbb.ch/fonts/v1_6_subset/SBBWeb-Roman.woff') format('woff');
  font-display: fallback;
}

@font-face {
  font-family: 'SBBWeb Thin';
  src: url('https://cdn.app.sbb.ch/fonts/v1_6_subset/SBBWeb-Thin.woff2') format('woff2'),
    url('https://cdn.app.sbb.ch/fonts/v1_6_subset/SBBWeb-Thin.woff') format('woff');
  font-display: swap;
}

@font-face {
  font-family: 'SBBWeb Ultralight';
  src: url('https://cdn.app.sbb.ch/fonts/v1_6_subset/SBBWeb-UltraLight.woff2') format('woff2'),
    url('https://cdn.app.sbb.ch/fonts/v1_6_subset/SBBWeb-UltraLight.woff') format('woff');
  font-display: swap;
}

// ----------------------------------------------------------------------------------------------------
// Reset HTML
// ----------------------------------------------------------------------------------------------------

*,
*::before,
*::after {
  box-sizing: border-box;
}

article,
aside,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section {
  display: block;
}

html {
  background: $sbbColorBg;
  color: $sbbColorText;
  font-family: $fontSbbRoman;
  font-size: private-div($sizeFontBase, 16px) * 100%;
  line-height: pxToRem($sizeLineHeightDefault);

  @include fontSmoothing;

  b,
  strong,
  optgroup[label='*'] {
    font-family: $fontSbbBold;
    font-weight: normal;
  }

  &:not(.sbb-lean) {
    @include mq($from: desktop4k) {
      line-height: pxToRem($sizeLineHeightDefault4k);
    }
    @include mq($from: desktop5k) {
      line-height: pxToRem($sizeLineHeightDefault5k);
    }
  }

  &.sbb-lean {
    line-height: pxToRem($sizeLineHeightDefaultLean);
  }
}

body {
  margin: 0;
}

// Suppress the focus outline on elements that cannot be accessed via keyboard.
// This prevents an unwanted focus outline from appearing around elements that
// might still respond to pointer events.
//
// Credit: https://github.com/suitcss/base
[tabindex='-1']:focus {
  outline: 0 !important;
}

input,
button,
select,
optgroup,
textarea {
  margin: 0; // Remove the margin in Firefox and Safari
  font-family: inherit;
  font-size: inherit;
  line-height: inherit;
}

table {
  th,
  td {
    color: $sbbColorBlack;
    font-size: pxToRem($sizeFontDefault);
    line-height: 1.5;
    margin: 0.75em 0 0;

    html:not(.sbb-lean) & {
      @include mq($from: desktop4k) {
        font-size: pxToRem($sizeFontDefault4k);
      }
      @include mq($from: desktop5k) {
        font-size: pxToRem($sizeFontDefault5k);
      }
    }
  }
  th {
    font-family: $fontSbbBold;
    font-weight: 400;
  }
}

[hidden] {
  display: none !important;
}

// ----------------------------------------------------------------------------------------------------
// CDK Styles
// ----------------------------------------------------------------------------------------------------

@include cdk.a11y-visually-hidden();
@include cdk.overlay();
@include cdk.text-field();

// SBB CDK Overlay Patch
.cdk-overlay-pane.sbb-overlay-panel {
  max-height: none;
}

// ----------------------------------------------------------------------------------------------------
// Headings
// ----------------------------------------------------------------------------------------------------

h1,
.sbb-headline1 {
  font-family: $fontSbbThin;
  font-weight: normal;
  font-size: pxToRem(28);
  line-height: pxToRem(28 * 1.2);
  margin: pxToRem(48) 0 pxToRem(36) 0;

  html:not(.sbb-lean) & {
    $sizes: (
      tablet: (
        30,
        72,
        48,
      ),
      desktop: (
        40,
        96,
        48,
      ),
      desktop4k: (
        60,
        144,
        72,
      ),
      desktop5k: (
        80,
        192,
        96,
      ),
    );
    @include mqSequence($sizes) using ($fontSize, $marginTop, $marginBottom) {
      font-size: pxToRem($fontSize);
      line-height: pxToRem($fontSize * 1.2);
      margin-top: pxToRem($marginTop);
      margin-bottom: pxToRem($marginBottom);
    }
  }
  html.sbb-lean & {
    font-family: $fontSbbLight;
    font-weight: normal;
    font-size: pxToRem(21);
    line-height: pxToRem(25);
    margin-top: pxToRem(24);
    margin-bottom: pxToRem(16);

    @include mq($from: desktop) {
      font-size: pxToRem(28);
      line-height: pxToRem(34);
      margin-top: pxToRem(32);
      margin-bottom: pxToRem(24);
    }
  }
}

h2,
.sbb-headline2 {
  font-family: $fontSbbLight;
  font-weight: normal;
  font-size: pxToRem(24);
  line-height: pxToRem(24 * 1.2);
  margin: pxToRem(36) 0 pxToRem(24) 0;

  html:not(.sbb-lean) & {
    $sizes: (
      tablet: (
        24,
        48,
        24,
      ),
      desktop: (
        32,
        48,
        24,
      ),
      desktop4k: (
        48,
        72,
        36,
      ),
      desktop5k: (
        64,
        96,
        48,
      ),
    );
    @include mqSequence($sizes) using ($fontSize, $marginTop, $marginBottom) {
      font-size: pxToRem($fontSize);
      line-height: pxToRem($fontSize * 1.2);
      margin-top: pxToRem($marginTop);
      margin-bottom: pxToRem($marginBottom);
    }
  }
  html.sbb-lean & {
    font-size: pxToRem(18);
    line-height: pxToRem(19);
    margin-top: pxToRem(16);
    margin-bottom: pxToRem(8);

    @include mq($from: desktop) {
      font-size: pxToRem(21);
      line-height: pxToRem(25);
      margin-top: pxToRem(24);
      margin-bottom: pxToRem(16);
    }
  }
}

h3,
.sbb-headline3 {
  font-family: $fontSbbLight;
  font-weight: normal;
  font-size: pxToRem(20);
  line-height: pxToRem(20 * 1.2);
  margin: pxToRem(24) 0 pxToRem(8) 0;

  html:not(.sbb-lean) & {
    $sizes: (
      tablet: (
        21,
        24,
        8,
      ),
      desktop4k: (
        32,
        36,
        12,
      ),
      desktop5k: (
        42,
        48,
        16,
      ),
    );
    @include mqSequence($sizes) using ($fontSize, $marginTop, $marginBottom) {
      font-size: pxToRem($fontSize);
      line-height: pxToRem($fontSize * 1.2);
      margin-top: pxToRem($marginTop);
      margin-bottom: pxToRem($marginBottom);
    }
  }
  html.sbb-lean & {
    font-size: pxToRem(16);
    line-height: pxToRem(17);
    margin-top: pxToRem(8);
    margin-bottom: pxToRem(4);

    @include mq($from: desktop) {
      font-size: pxToRem(18);
      line-height: pxToRem(22);
      margin-top: pxToRem(16);
      margin-bottom: pxToRem(8);
    }
  }
}

h4,
.sbb-headline4 {
  font-family: $fontSbbBold;
  font-weight: normal;
  font-size: pxToRem($sizeFontDefault);
  line-height: pxToRem($sizeFontDefault * 1.5);
  margin: pxToRem(24) 0 pxToRem(8);

  html:not(.sbb-lean) & {
    $sizes: (
      desktop4k: (
        $sizeFontDefault4k,
        36,
        12,
      ),
      desktop5k: (
        $sizeFontDefault5k,
        48,
        16,
      ),
    );
    @include mqSequence($sizes) using ($fontSize, $marginTop, $marginBottom) {
      font-size: pxToRem($fontSize);
      line-height: pxToRem($fontSize * 1.5);
      margin-top: pxToRem($marginTop);
      margin-bottom: pxToRem($marginBottom);
    }
  }
  html.sbb-lean & {
    line-height: pxToRem(17);
    margin-top: pxToRem(8);
    margin-bottom: pxToRem(4);

    @include mq($from: desktop) {
      font-size: pxToRem(16);
      line-height: pxToRem(19);
      margin-top: pxToRem(16);
      margin-bottom: pxToRem(8);
    }
  }
}

// ----------------------------------------------------------------------------------------------------
// Text
// ----------------------------------------------------------------------------------------------------

.sbb-text-lead {
  font-family: $fontSbbLight;
  font-weight: normal;
  color: $sbbColorText;
  font-size: pxToRem(20);
  line-height: pxToRem(26);
  margin: pxToRem(36) 0 pxToRem(36) 0;

  // To allow usage with p tag (p.sbb-text-lead), use variant selectors which guarantee overwriting p/copy styles
  html:not(.sbb-lean) &,
  html.sbb-lean & {
    $sizes: (
      tablet: (
        21,
        27.3,
        48,
      ),
      desktop: (
        21,
        32,
        48,
      ),
      desktop4k: (
        32,
        41.6,
        72,
      ),
      desktop5k: (
        40,
        52,
        96,
      ),
    );
    @include mqSequence($sizes) using($fontSize, $lineHeight, $margin) {
      font-size: pxToRem($fontSize);
      line-height: pxToRem($lineHeight);
      margin-top: pxToRem($margin);
      margin-bottom: pxToRem($margin);
    }
  }
}

p,
.sbb-copy {
  font-size: pxToRem($sizeFontDefault);
  line-height: pxToRem($sizeLineHeightDefault);
  margin: pxToRem(8) 0 pxToRem(8) 0;

  html:not(.sbb-lean) & {
    @include mq($from: desktop4k) {
      font-size: pxToRem($sizeFontDefault4k);
      line-height: pxToRem($sizeLineHeightDefault4k);
      margin-top: pxToRem(12);
      margin-bottom: pxToRem(12);
    }
    @include mq($from: desktop5k) {
      font-size: pxToRem($sizeFontDefault5k);
      line-height: pxToRem($sizeLineHeightDefault5k);
      margin-top: pxToRem(16);
      margin-bottom: pxToRem(16);
    }
  }
  html.sbb-lean & {
    line-height: pxToRem($sizeLineHeightDefaultLean);
    margin-top: pxToRem(4);
    margin-bottom: pxToRem(4);
  }
}

// ----------------------------------------------------------------------------------------------------
// Link
// ----------------------------------------------------------------------------------------------------

a,
.sbb-link {
  color: $sbbColorText;
  text-decoration: underline;
  text-decoration-skip-ink: auto; // -> read more about here https://medium.com/@iamhiwelo/improving-text-readability-for-dyslexic-users-with-skip-ink-underlines-bf52a2f3426b
  line-height: 1.733;

  html.sbb-lean & {
    line-height: pxToRem($sizeLineHeightDefaultLean);
  }

  &:hover,
  &:focus {
    color: $sbbColorRed125;

    @media screen and (-ms-high-contrast: active) {
      color: windowText;

      &::before,
      &::after {
        border-color: windowText;
      }
    }
  }

  // TODO: 4k, 5k
}

// Reset <a> styles for specific scenarios.
.sbb-link-reset {
  color: unset;
  text-decoration: unset;
  text-decoration-skip-ink: unset;
  line-height: unset;

  html.sbb-lean & {
    line-height: unset;
  }

  &:hover,
  &:focus {
    color: unset;

    @media screen and (-ms-high-contrast: active) {
      color: unset;

      &::before,
      &::after {
        border-color: unset;
      }
    }
  }
}

// ----------------------------------------------------------------------------------------------------
// Lists TODO: add 4k, 5k styles and check every usage of our angular modules for specificity
// ----------------------------------------------------------------------------------------------------

ul,
.sbb-unordered-list,
ol,
.sbb-ordered-list {
  font-size: pxToRem($sizeFontDefault);
  margin-left: pxToRem(8);
  margin-top: pxToRem(17);
  margin-bottom: pxToRem(30);

  @include mq($from: desktop) {
    margin-top: pxToRem(25);
  }

  li {
    margin-top: pxToRem(8);
  }
}

ul,
.sbb-unordered-list {
  list-style-type: disc;
  padding-left: pxToRem(16);
}

ul li,
.sbb-unordered-list li {
  padding-left: pxToRem(16 - 6);
}

ol,
.sbb-ordered-list {
  list-style-type: none;
  counter-reset: item;
  padding-left: 0;

  > li {
    display: table;
    padding-left: 0;
  }

  > li::before {
    content: counters(item, '.') '.';
    counter-increment: item;

    display: table-cell;
    padding-right: pxToRem(13);
  }
}

ol ol,
.sbb-ordered-list ol,
ol ul,
.sbb-ordered-list ul,
ul ul,
.sbb-unordered-list ul,
ul ol,
.sbb-unordered-list ol {
  margin: pxToRem(6) 0 0 pxToRem(8);
}

// if ol is nested inside ul, we need just 1 hierarchy level for the counter
ul li ol > li::before,
.sbb-unordered-list li ol > li::before {
  content: counter(item) '.';
}

// ----------------------------------------------------------------------------------------------------
// Form Elements
// ----------------------------------------------------------------------------------------------------

$sbbInputMinHeightStandard: 48;

.sbb-input-element {
  @include ellipsis;
  @include placeholder($sbbColorStorm);

  outline: none;
  background-color: $sbbColorWhite;
  padding: pxToRem(10) pxToRem(14) pxToRem(11);
  border: pxToRem(2) solid $sbbColorGraphite;
  border-radius: pxToRem(2);
  color: $sbbColorGrey;
  font-size: pxToRem($sizeFontDefault);
  line-height: pxToRem(23);
  min-height: pxToRem($sbbInputMinHeightStandard);

  html:not(.sbb-lean) & {
    @include mq($from: desktop4k) {
      padding: pxToRem(15) pxToRem(21) pxToRem(16);
      border-width: pxToRem(2 * $scalingFactor4k);
      border-radius: pxToRem(2 * $scalingFactor4k);
      font-size: pxToRem($sizeFontDefault4k);
      line-height: pxToRem(35);
      min-height: pxToRem($sbbInputMinHeightStandard * $scalingFactor4k);
    }
    @include mq($from: desktop5k) {
      padding: pxToRem(21) pxToRem(28) pxToRem(22);
      border-width: pxToRem(2 * $scalingFactor5k);
      border-radius: pxToRem(2 * $scalingFactor5k);
      font-size: pxToRem($sizeFontDefault5k);
      line-height: pxToRem(45);
      min-height: pxToRem($sbbInputMinHeightStandard * $scalingFactor5k);
    }
  }
  html.sbb-lean & {
    color: $sbbColorIron;
    border-width: pxToRem(1);
    padding: pxToRem(6) pxToRem(7) pxToRem(8);
    line-height: pxToRem(20);
    min-height: pxToRem(36);
  }

  // Undo the red box-shadow glow added by Firefox on invalid inputs.
  // See https://developer.mozilla.org/en-US/docs/Web/CSS/:-moz-ui-invalid
  &:-moz-ui-invalid {
    box-shadow: none;
  }

  // Remove IE's default clear and reveal icons.
  &::-ms-clear,
  &::-ms-reveal {
    display: none;
  }

  // Clear Safari's decorations for search fields.
  &,
  &::-webkit-search-cancel-button,
  &::-webkit-search-decoration,
  &::-webkit-search-results-button,
  &::-webkit-search-results-decoration {
    -webkit-appearance: none;
  }

  // Also clear Safari's autofill icons. Note that this can't be in the
  // same selector as the IE ones, otherwise Safari will ignore it.
  &::-webkit-contacts-auto-fill-button,
  &::-webkit-caps-lock-indicator,
  &::-webkit-credentials-auto-fill-button {
    visibility: hidden;
  }

  &[type='date'],
  &[type='datetime'],
  &[type='datetime-local'],
  &[type='month'],
  &[type='week'],
  &[type='time'] {
    // Due to the native input masking these inputs can be slightly taller than
    // the plain text inputs. We normalize it by resetting the line height.
    line-height: 1;

    // Fixes an issue on iOS where the following input types will collapse to 1px,
    // if they're empty, because we've overridden their background color.
    // See: https://stackoverflow.com/questions/18381594/input-type-date-appearance-in-safari-on-ios
    &::after {
      content: ' ';
      white-space: pre;
      width: 1px;
    }
  }

  // Reduce the size of the native buttons in a date/time input,
  // because they can increase the height of the input (see #13317).
  &::-webkit-inner-spin-button,
  &::-webkit-calendar-picker-indicator,
  &::-webkit-clear-button {
    font-size: 0.75em;
  }

  &:focus,
  &.sbb-focused {
    border-color: $sbbColorGrey;

    html.sbb-lean & {
      border-color: $sbbColorIron;
    }
  }

  &:disabled,
  &[disabled],
  &.sbb-disabled {
    background-color: $sbbColorMilk;
    border-color: $sbbColorAluminum;
    color: $sbbColorGrey;
    -webkit-text-fill-color: $sbbColorGrey;
    opacity: 1;
    cursor: default;
    pointer-events: none;

    html.sbb-lean & {
      color: $sbbColorGranite;
      -webkit-text-fill-color: $sbbColorGranite;
    }
  }

  &[readonly],
  &.sbb-readonly {
    &,
    &:focus {
      background: $sbbColorMilk;
      border-color: $sbbColorAluminum;

      html.sbb-lean & {
        background: transparent;
        border-color: transparent;
      }
    }
  }

  // We want to provide the error styles both for invalid state
  // in a sbb-form-field and also for Angular Form Validation.
  .sbb-form-field-invalid &:not([aria-expanded='true']),
  &.ng-touched.ng-invalid:not([aria-expanded='true']) {
    color: $sbbColorError;
    border-color: $sbbColorError;
  }
}

input[placeholder],
.sbb-input-element[placeholder] {
  text-overflow: ellipsis;
}

input[type='number'],
input[type='time'],
input[type='datetime'],
input[type='datetime-local'] {
  -moz-appearance: textfield;

  &::-webkit-inner-spin-button,
  &::-webkit-outer-spin-button,
  &::-webkit-clear-button {
    appearance: none;
    margin: 0;
    width: 0;
    padding: 0;
    background: transparent;
  }
}

select {
  -moz-appearance: none;
  -webkit-appearance: none;
  position: relative;
  display: inline-flex;
  box-sizing: border-box;
  padding-right: pxToEm(44);

  // Custom select expand icon
  align-items: center;
  background: transparent url($sbbIconChevronSmallDownSmallGrey) no-repeat center right pxToEm(9);
  background-size: pxToRem(24) pxToRem(24);

  html:not(.sbb-lean) & {
    @include mq($from: desktop4k) {
      background-size: pxToRem(24 * $scalingFactor4k);
    }
    @include mq($from: desktop5k) {
      background-size: pxToRem(24 * $scalingFactor5k);
    }
  }
  html.sbb-lean & {
    padding-right: pxToRem(38);
    background-position: center right pxToRem(6);
    background-image: url($sbbIconChevronRightSmallRotatedDownGranite);
  }

  &::-ms-expand {
    display: none;
  }

  // As a part of its user agent styling, IE11 has a blue box inside each focused
  // `select` element which we have to reset. Note that this needs to be in its own
  // selector, because having it together with another one will cause other browsers
  // to ignore it.
  &::-ms-value {
    // We need to reset the `color` as well, because IE sets it to white.
    color: inherit;
    background: none;

    // IE and Edge in high contrast mode reset the color for a focused select to the same color
    // as the background, however this causes it blend in because we've reset the `background`
    // above. We have to add a more specific selector in order to ensure that it gets the
    // `color` from our theme instead.
    @include cdk.high-contrast(active, off) {
      .sbb-focused & {
        color: inherit;
      }
    }
  }

  // The `outline: none` from `.sbb-input-element` works on all browsers, however Firefox also
  // adds a special `focus-inner` which we have to disable explicitly. See:
  // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#Firefox
  &::-moz-focus-inner {
    border: 0;
  }

  &:not(:disabled) {
    cursor: pointer;
  }
}

textarea {
  white-space: pre-wrap;
  overflow: auto;

  &:disabled {
    opacity: 1;
  }
}

// ----------------------------------------------------------------------------------------------------
// Fieldset
// ----------------------------------------------------------------------------------------------------

fieldset,
.sbb-fieldset {
  $borderWidth: 1;
  margin: 0;
  min-width: 0;
  border: pxToRem($borderWidth) solid $sbbColorSilver;
  padding: pxToRem(36 - $borderWidth) pxToRem(24 - $borderWidth);

  > legend {
    display: block;
    width: 100%;
    max-width: 100%;
    padding: 0;
    font-family: $fontSbbLight;
    font-weight: 400;
    line-height: 1.2;
    font-size: pxToRem(24);
    margin: 0 0 pxToRem(24);
    float: left;
  }

  fieldset {
    border-top: none;
    border-right: none;
    border-left: none;
    padding-left: 0;
    padding-right: 0;

    &:last-of-type {
      border-bottom: none;
    }

    > legend {
      font-size: pxToRem(20);
    }
  }

  html:not(.sbb-lean) & {
    > legend {
      @include mq($from: desktop) {
        font-size: pxToRem(32);
      }
      @include mq($from: desktop4k) {
        font-size: pxToRem(48);
        margin: 0 0 pxToRem(36);
      }
      @include mq($from: desktop5k) {
        font-size: pxToRem(64);
        margin: 0 0 pxToRem(48);
      }
    }

    fieldset {
      > legend {
        $fontSizes: (
          desktop: pxToRem(22),
          desktop4k: pxToRem(32),
          desktop5k: pxToRem(42),
        );
        @include mqSequence($fontSizes) using ($value) {
          font-size: $value;
        }
      }
    }

    @include mq($from: tabletPortrait) {
      padding: pxToRem(48) pxToRem(24);
    }
    @include mq($from: desktop4k) {
      font-size: pxToRem($sizeFontBase * $scalingFactor4k);
    }
    @include mq($from: desktop5k) {
      font-size: pxToRem($sizeFontBase * $scalingFactor5k);
    }
  }
  html.sbb-lean & {
    border: pxToRem($borderWidth) solid $sbbColorGraphite;
    padding: pxToRem(16 - $borderWidth);

    > legend {
      font-size: pxToRem(21);
      margin: 0 0 pxToRem(8);
    }

    fieldset {
      border-color: $sbbColorCloud;

      > legend {
        font-size: pxToRem(16);
      }
    }
  }
}

// ----------------------------------------------------------------------------------------------------
// Button Resets
// ----------------------------------------------------------------------------------------------------

.sbb-button-reset {
  @include buttonReset();
}

.sbb-button-reset-frameless {
  @include buttonResetFrameless();
}

// ----------------------------------------------------------------------------------------------------
// SBB Badge
// ----------------------------------------------------------------------------------------------------

.sbb-badge {
  position: relative;
}

.sbb-badge-above {
  .sbb-badge-content {
    top: pxToEm(-2, 11);
  }
}

.sbb-badge-after {
  .sbb-badge-content {
    right: 0;
  }
}

.sbb-badge-hidden {
  .sbb-badge-content {
    display: none;
  }
}

.sbb-badge-disabled,
.sbb-tab-disabled {
  .sbb-badge-content {
    background-color: $sbbColorMetal;
    color: $sbbColorWhite;

    html.sbb-lean & {
      background-color: $sbbColorGranite;
    }
  }
}

.sbb-badge-content {
  position: absolute;
  text-align: center;
  display: inline-block;
  transition: transform 200ms ease-in-out;
  transform: scale(0.6);
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  pointer-events: none;

  min-width: pxToEm(18, 11);
  border-radius: 1em; // 1em ensures the borders are always fully rounded, but not oval.
  padding: pxToEm(4, 11) pxToEm(5, 11);
  margin-left: pxToEm(2, 11);
  background-color: $sbbColorRed;
  color: $sbbColorWhite;
  font-family: $fontSbbBold;
  line-height: 1;
  font-size: pxToRem(11);
  height: pxToEm(18, 11);

  html:not(.sbb-lean) & {
    @include mq($from: desktop4k) {
      font-size: pxToRem(17);
    }
    @include mq($from: desktop5k) {
      font-size: pxToRem(22);
    }
  }

  html.sbb-lean & {
    background-color: $sbbColorBlack;
  }
}

.ng-animate-disabled .sbb-badge-content,
.sbb-badge-content._sbb-animation-noopable {
  transition: none;
}

// The active class is added after the element is added
// so it can animate scale to default
.sbb-badge-content.sbb-badge-active {
  // Scale to `none` instead of `1` to avoid blurry text in some browsers.
  transform: none;
}

// ----------------------------------------------------------------------------------------------------
// SBB Button
// ----------------------------------------------------------------------------------------------------

.sbb-button,
.sbb-alt-button,
.sbb-secondary-button,
.sbb-ghost-button,
.sbb-icon-button {
  @include ellipsis;
  width: 100%;
  background: none;
  max-width: none;
  min-width: 0;
  text-decoration: none;
  display: inline-block;
  position: relative;
  text-align: center;
  font-size: pxToRem($sizeFontDefault);
  line-height: pxToRem(26);
  border: pxToRem(1) solid transparent;
  border-radius: pxToEm(2);
  // Subtract 1 from the padding values, since we always use the border
  // in order to avoid tearing on state changes.
  padding: pxToRem(9) pxToRem(39) pxToRem(11);
  margin: 0;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  outline: none;

  @include mq($from: tabletPortrait) {
    width: auto;
    // We use em here, in order to scale for 4k and 5k
    min-width: pxToEm(60);
    max-width: pxToEm(400);
  }

  html:not(.sbb-lean) & {
    @include mq($from: desktop4k) {
      font-size: pxToRem($sizeFontDefault4k);
      line-height: pxToRem(39);
      border-width: pxToRem(2);
      // Subtract 2 from the padding values, since we always use the border
      // in order to avoid tearing on state changes.
      padding: pxToRem(14) pxToRem(58) pxToRem(15);
    }
    @include mq($from: desktop5k) {
      font-size: pxToRem($sizeFontDefault5k);
      line-height: pxToRem(52);
      // Subtract 2 from the padding values, since we always use the border
      // in order to avoid tearing on state changes.
      padding: pxToRem(19) pxToRem(78) pxToRem(21);
    }
  }

  html.sbb-lean & {
    line-height: pxToRem(23);
    // Subtract 1 from the padding values, since we always use the border
    // in order to avoid tearing on state changes.
    padding: pxToRem(5) pxToRem(15) pxToRem(6);
  }

  &:not(:disabled):not(.sbb-disabled) {
    cursor: pointer;
  }

  &:disabled,
  &.sbb-disabled {
    html:not(.sbb-lean) & {
      background-color: transparent;
      color: $sbbColorGrey;
      border-color: $sbbColorGreyMedium;

      &,
      & * {
        text-decoration: line-through;
      }
    }
  }
}

.sbb-button {
  background-color: $sbbColorRed;
  color: $sbbColorWhite;

  &:not(:disabled):not(.sbb-disabled) {
    &:hover,
    &:focus {
      background: $sbbColorRed125;
    }
  }

  &:disabled,
  &.sbb-disabled {
    html.sbb-lean & {
      background-color: rgba($sbbColorRed, 0.4);
      color: rgba($sbbColorWhite, 0.5);
    }
  }
}

.sbb-alt-button {
  background-color: $sbbColorGranite;
  color: $sbbColorWhite;

  &:not(:disabled):not(.sbb-disabled) {
    &:hover,
    &:focus {
      background: $sbbColorIron;
    }
  }

  &:disabled,
  &.sbb-disabled {
    html.sbb-lean & {
      background-color: rgba($sbbColorGranite, 0.4);
      color: rgba($sbbColorWhite, 0.5);
    }
  }
}

.sbb-secondary-button,
.sbb-icon-button {
  background-color: $sbbColorSilver;
  color: $sbbColorIron;

  &:not(:disabled):not(.sbb-disabled) {
    &:hover,
    &:focus {
      background: $sbbColorPlatinum;
    }
  }

  &:disabled,
  &.sbb-disabled {
    html.sbb-lean & {
      background-color: rgba($sbbColorSilver, 0.4);
      color: rgba($sbbColorIron, 0.5);
    }
  }
}

.sbb-ghost-button {
  background-color: transparent;
  color: $sbbColorGrey;
  border-color: $sbbColorStorm;

  html.sbb-lean & {
    color: $sbbColorGranite;
    border-color: $sbbColorStorm;
  }

  &:not(:disabled):not(.sbb-disabled) {
    &:hover,
    &:focus {
      border-color: $sbbColorIron;
    }
  }

  &:disabled,
  &.sbb-disabled {
    html:not(.sbb-lean) & {
      display: none;
    }
    html.sbb-lean & {
      color: rgba($sbbColorIron, 0.4);
      border-color: rgba($sbbColorStorm, 0.4);
    }
  }
}

.sbb-icon-button {
  // Subtract 1 from the padding values, since we always use the border
  // in order to avoid tearing on state changes.
  padding: pxToRem(5) !important;
  min-width: auto;
  line-height: 0 !important;
}

.sbb-frameless-button,
// We only want to style .sbb-link classes which use the sbb-link component
.sbb-link.sbb-button-base {
  @include buttonResetFrameless();
  @include ellipsis;
  position: relative;
  display: inline-block;
  text-decoration: none;
  text-align: left;
  cursor: pointer;
  outline: none;

  html:not(.sbb-lean) & {
    @include mq($from: desktop4k) {
      font-size: pxToRem($sizeFontDefault * $scalingFactor4k);
      line-height: pxToRem(39);
    }
    @include mq($from: desktop5k) {
      font-size: pxToRem($sizeFontDefault * $scalingFactor5k);
      line-height: pxToRem(52);
    }
  }

  &:not(:disabled):not(.sbb-disabled) {
    &:hover,
    &:focus {
      color: $sbbColorRed125;
    }
  }
}

.sbb-frameless-button {
  color: $sbbColorIron;

  &:disabled,
  &.sbb-disabled {
    display: none;
  }
}

// We're using pxToEm for the rules below, since the used values do not
// bleed and scale accordingly with 4k and 5k.

.sbb-button-indicator-icon {
  position: absolute;
  top: 50%;
  margin-top: pxToEm(-12.5);
  transition: opacity $linkiconAnimation, margin-left $linkiconAnimation;
  backface-visibility: hidden;
  pointer-events: none;

  &.sbb-icon-fit {
    width: pxToEm(24);
    height: pxToEm(24);
  }

  .sbb-button-base.sbb-disabled &,
  .sbb-button-base.sbb-disabled:hover & {
    opacity: 0;
  }

  html:not(.sbb-lean) .sbb-button-base.sbb-link & {
    color: $sbbColorRed;
  }

  html:not(.sbb-lean) .sbb-button-base.sbb-link:hover & {
    color: inherit;
  }
}

.sbb-button-left-icon {
  margin-left: pxToEm(-60);
  opacity: 0;

  .sbb-button-base:hover & {
    margin-left: 0;
    opacity: 1;
  }
}

.sbb-button-right-icon {
  margin-left: pxToEm(-20);
  opacity: 1;

  html:not(.sbb-lean) .sbb-button-base:hover & {
    margin-left: pxToEm(40);
    opacity: 0;
  }

  html.sbb-lean & {
    margin-left: pxToEm(-24);
  }
}

.sbb-button-wrapper {
  display: inline-block;

  // We only need to specify the animation for the text, if a left indicator icon exists.
  .sbb-button-left-icon + & {
    margin-left: 0;
    margin-right: pxToEm(30);
    transition: margin-left $linkiconAnimation, margin-right $linkiconAnimation;

    .sbb-button-base:hover & {
      margin-left: pxToEm(30);
      margin-right: 0;
    }

    .sbb-button-base.sbb-disabled & {
      margin-left: pxToEm(15);
      margin-right: pxToEm(15);
    }
  }

  html.sbb-lean .sbb-button-base.sbb-link & {
    padding-right: pxToEm(32);
  }
}

// ----------------------------------------------------------------------------------------------------
// SBB Checkbox & Radio Button
// ----------------------------------------------------------------------------------------------------

// This is the basic class for checkbox and radio button.
.sbb-selection-item {
  display: inline-block;
}

// This is the class that should be applied to the label wrapper of
// custom checkboxes or radio buttons.
.sbb-selection-item-label {
  display: flex;
  position: relative; // assure absolute positioned native input is close to the label!
  align-items: flex-start;

  html:not(.sbb-lean) & {
    @include mq($from: desktop4k) {
      font-size: pxToRem($sizeFontDefault4k);
    }
    @include mq($from: desktop5k) {
      font-size: pxToRem($sizeFontDefault5k);
    }
  }
}

@mixin sbbSelectionDimension($factor) {
  width: pxToRem(20 * $factor);
  min-width: pxToRem(20 * $factor);
  height: pxToRem(20 * $factor);
  min-height: pxToRem(20 * $factor);
  border: pxToRem(2 * $factor) solid $sbbColorGraphite;
  margin-right: pxToRem(8 * $factor);
}

.sbb-selection-container {
  display: inline-block;
  background-color: $sbbColorWhite;
  margin-top: pxToRem(3);
  @include sbbSelectionDimension(1);

  html:not(.sbb-lean) & {
    @include mq($from: desktop4k) {
      margin-top: pxToRem(4);
      @include sbbSelectionDimension($scalingFactor4k);
    }
    @include mq($from: desktop5k) {
      margin-top: pxToRem(5);
      @include sbbSelectionDimension($scalingFactor5k);
    }
  }
  html.sbb-lean & {
    border-width: pxToRem(1);
    margin-top: pxToRem(1);
  }
}

.sbb-selection-container-checked {
  color: $sbbColorRed;
  line-height: 0;
  height: 100%;
  width: 100%;
  transition: opacity 0.3s cubic-bezier(0.785, 0.135, 0.15, 0.86);
  position: relative;

  html.sbb-lean & {
    color: $sbbColorIron;
  }
}

.sbb-selection-content {
  user-select: auto;
  color: $sbbColorGrey;
  transition: color 0.3s cubic-bezier(0.785, 0.135, 0.15, 0.86);

  html.sbb-lean & {
    color: $sbbColorGranite;
    line-height: pxToRem(21);
  }
}

.sbb-selection-input:focus + .sbb-selection-container {
  border-color: $sbbColorGrey;

  html.sbb-lean & {
    border-color: $sbbColorIron;
  }
}

// Applies focus highlight for pseudo-checkbox
.sbb-menu-item.sbb-active .sbb-pseudo-checkbox .sbb-selection-container {
  border-color: $sbbColorGrey;

  html.sbb-lean & {
    border-color: $sbbColorIron;
  }
}

.sbb-checkbox-input + .sbb-selection-container,
.sbb-pseudo-checkbox > .sbb-selection-container {
  border-radius: pxToRem(2);

  & > .sbb-selection-container-checked {
    display: none;
    border-radius: pxToRem(2);
    transform: scale(1.3);

    & > svg {
      display: inline-block;
      line-height: 0;
      position: absolute;
      width: 100%;
      height: 100%;

      & > polyline {
        stroke: currentColor;
      }
    }
  }
}

.sbb-radio-input + .sbb-selection-container {
  border-radius: 50%;

  html.sbb-lean & {
    margin-top: 0;
  }

  & > .sbb-selection-container-checked {
    display: none;
    border-radius: 50%;
    transform: scale(0.65);
    background-color: $sbbColorRed;

    html.sbb-lean & {
      background-color: $sbbColorIron;
    }
  }
}

.sbb-selection-checked {
  .sbb-selection-container {
    & > .sbb-selection-container-checked {
      display: block;
    }

    & + .sbb-selection-content {
      color: $sbbColorBlack;
    }
  }

  html.sbb-lean & {
    .sbb-selection-container + .sbb-selection-content {
      color: $sbbColorIron;
    }
  }
}

.sbb-selection-indeterminate {
  .sbb-selection-container {
    &::before {
      content: '';
      position: relative;
      height: pxToRem(1);
      width: pxToRem(10);
      left: calc(50% - #{pxToRem(5)});
      top: calc(50% - #{pxToRem(0.5)});
      border: pxToRem(1) solid $sbbColorRed;
      display: block;
    }

    & > .sbb-selection-container-checked {
      display: none;
    }

    & + .sbb-selection-content {
      color: $sbbColorBlack;
    }
  }

  html.sbb-lean & {
    .sbb-selection-container {
      &::before {
        border: pxToRem(1) solid $sbbColorGranite;
      }

      & + .sbb-selection-content {
        color: $sbbColorIron;
      }
    }
  }
}

// Applies indeterminate styles for pseudo-checkbox
html.sbb-lean .sbb-pseudo-checkbox.sbb-selection-indeterminate .sbb-selection-container::before {
  border: pxToRem(1) solid $sbbColorGranite;
}

.sbb-selection-disabled {
  pointer-events: none;

  .sbb-selection-container {
    border-color: $sbbColorAluminum;
    background-color: $sbbColorMilk;

    & > .sbb-selection-container-checked {
      color: $sbbColorGrey;
    }

    & + .sbb-selection-content {
      color: $sbbColorGrey;
    }
  }

  .sbb-radio-input + .sbb-selection-container > .sbb-selection-container-checked {
    background-color: $sbbColorGrey;
  }

  html.sbb-lean & {
    .sbb-selection-container {
      & > .sbb-selection-container-checked {
        color: $sbbColorGranite;
      }

      & + .sbb-selection-content {
        color: $sbbColorStorm;
      }
    }

    .sbb-radio-input + .sbb-selection-container > .sbb-selection-container-checked {
      background-color: $sbbColorGranite;
    }
  }
}

// Applies disabled styles for pseudo-checkbox
html.sbb-lean .sbb-pseudo-checkbox.sbb-selection-disabled .sbb-selection-container-checked {
  color: $sbbColorGranite;
}

.sbb-checkbox-group-vertical,
.sbb-radio-group-vertical {
  display: flex;
  flex-wrap: wrap;
  flex-direction: column;
  align-items: flex-start;

  .sbb-selection-item + .sbb-selection-item {
    margin-top: pxToRem(16);

    html:not(.sbb-lean) & {
      @include mq($from: desktop4k) {
        margin-top: pxToRem(16 * $scalingFactor4k);
      }
      @include mq($from: desktop5k) {
        margin-top: pxToRem(16 * $scalingFactor5k);
      }
    }
    html.sbb-lean & {
      margin-top: pxToRem(3);
    }
  }
}

.sbb-checkbox-group-horizontal,
.sbb-radio-group-horizontal {
  display: flex;
  flex-wrap: wrap;
  align-items: flex-start;

  .sbb-selection-item {
    margin-right: pxToRem(32);

    html:not(.sbb-lean) & {
      @include mq($from: desktop4k) {
        margin-right: pxToRem(32 * $scalingFactor4k);
      }
      @include mq($from: desktop5k) {
        margin-right: pxToRem(32 * $scalingFactor5k);
      }
    }
    html.sbb-lean & {
      margin-right: pxToRem(15);
    }

    &:last-of-type {
      margin-right: 0;
    }
  }
}

// ----------------------------------------------------------------------------------------------------
// SBB Checkbox Panel & Radio Button Panel
// ----------------------------------------------------------------------------------------------------

.sbb-selection-panel-item {
  display: inline-block;
  background-color: $sbbColorMilk;
  border: pxToRem(1) solid transparent;
  border-radius: pxToRem(2);
  font-size: pxToRem($sizeFontDefault);
  line-height: pxToRem(26);
  color: $sbbColorGrey;
  width: 100%;
  transition: border-color 0.15s ease-in-out;
  user-select: none;
  position: relative;

  html:not(.sbb-lean) & {
    @include mq($from: desktop4k) {
      border-radius: pxToRem(3);
      font-size: pxToRem($sizeFontDefault4k);
      line-height: pxToRem(39);
    }
    @include mq($from: desktop5k) {
      border-radius: pxToRem(4);
      font-size: pxToRem($sizeFontDefault5k);
      line-height: pxToRem(52);
    }
  }

  &.sbb-selection-checked {
    background-color: $sbbColorWhite;
    border-color: $sbbColorBlack;
    color: $sbbColorBlack;
  }

  // We need to provide error styling for both on the element
  // or on a wrapper (e.g. sbb-radio-group) with both manual
  // classes and Angular Form Validation classes.
  &.sbb-selection-error,
  .sbb-selection-error &,
  &.ng-touched.ng-invalid,
  .ng-touched.ng-invalid & {
    border-color: $sbbColorRed;
    color: $sbbColorRed;
  }

  &.sbb-selection-disabled {
    background-color: $sbbColorWhite;
    border-color: $sbbColorAluminum;
  }

  .sbb-selection-container,
  .sbb-selection-panel-icon {
    display: inline-block;
    flex: 0 0 auto;
  }

  .sbb-selection-content {
    flex: 1 auto;
    display: flex;
    flex-wrap: wrap;
    overflow-x: hidden;
  }
}

.sbb-selection-panel-item .sbb-selection-item-label {
  padding: pxToRem(19) pxToRem(24);

  html:not(.sbb-lean) & {
    @include mq($from: desktop4k) {
      padding: pxToRem(29) pxToRem(36) pxToRem(28);
    }
    @include mq($from: desktop5k) {
      padding: pxToRem(39) pxToRem(48) pxToRem(37);
    }
  }
}

.sbb-selection-inner-content {
  flex-direction: column;
  display: flex;
  flex: 1 1 50%;
  padding-right: pxToEm(8);
  margin-bottom: pxToEm(8);

  @include mq($from: tablet) {
    margin-bottom: 0;
  }
}

.sbb-selection-panel-subtitle {
  font-size: pxToRem(13);
  line-height: pxToRem(20);
  color: $sbbColorGrey;

  html:not(.sbb-lean) & {
    @include mq($from: desktop4k) {
      font-size: pxToRem(20);
      line-height: pxToRem(30);
    }
    @include mq($from: desktop5k) {
      font-size: pxToRem(26);
      line-height: pxToRem(39);
    }
  }
  html.sbb-lean {
    color: $sbbColorGranite;
  }
}

.sbb-selection-panel-warning {
  flex: 1 100%;
  order: 3;
  color: $sbbColorGrey;

  @include mq($from: tablet) {
    padding-left: pxToEm(24);
    padding-right: pxToEm(8);
    flex-basis: auto;
    order: initial;
  }

  html.sbb-lean {
    color: $sbbColorGranite;
  }
}

.sbb-selection-panel-note {
  margin-left: auto;
  margin-bottom: pxToEm(8);

  @include mq($from: tablet) {
    margin-bottom: 0;
  }

  img {
    max-height: pxToEm(24);
  }
  sbb-icon {
    width: pxToEm(24);
    height: pxToEm(24);

    svg {
      width: 100%;
      height: 100%;
    }
  }
}

// These are the css classes to group sbb-checkbox-panel & sbb-radio-button-panel
// We use em here to reduce media query usage.
.sbb-checkbox-panel-group,
.sbb-radio-panel-group {
  display: flex;
  flex-direction: column;
  font-size: pxToRem($sizeFontDefault);

  $sbbSelectionPanelMargin: 3;
  @include mq($from: tablet) {
    flex-wrap: wrap;
    flex-direction: row;
    align-items: flex-start;
    margin-left: pxToEm($sbbSelectionPanelMargin * -1);
    margin-right: pxToEm($sbbSelectionPanelMargin * -1);
  }

  html:not(.sbb-lean) & {
    @include mq($from: desktop4k) {
      font-size: pxToRem($sizeFontDefault4k);
    }
    @include mq($from: desktop5k) {
      font-size: pxToRem($sizeFontDefault5k);
    }
  }

  .sbb-selection-panel-item {
    flex: 1 1 100%;
    margin: 0 pxToEm($sbbSelectionPanelMargin) pxToEm(8);
  }

  // The number indicates the max number of columns for the resolution
  $sbbSelectionPanelResolutions: (
    tablet: 4,
    desktop: 8,
    desktopLarge: 8,
    desktop2k: 8,
    desktop4k: 8,
    desktop5k: 8,
  );

  @each $from, $max in $sbbSelectionPanelResolutions {
    @for $i from 2 through $max {
      &.sbb-col-#{$from}-#{$i} .sbb-selection-panel-item {
        $percentage: toPercent(private-div(1, $i));
        @include mq($from: $from) {
          flex-basis: calc(#{$percentage} - #{pxToEm($sbbSelectionPanelMargin * 2)});
          max-width: calc(#{$percentage} - #{pxToEm($sbbSelectionPanelMargin * 2)});
        }
      }
    }
  }
}

// ----------------------------------------------------------------------------------------------------
// SBB Label
// ----------------------------------------------------------------------------------------------------

.sbb-label {
  letter-spacing: 0;
  outline: 0;
  resize: none;
  background-color: transparent;
  font-family: $fontSbbRoman;
  font-size: pxToRem(13);
  line-height: pxToRem(16);
  color: $sbbColorGrey;
  display: block;

  html:not(.sbb-lean) & {
    @include mq($from: desktop4k) {
      font-size: pxToRem(20);
      line-height: pxToRem(24);
    }
    @include mq($from: desktop5k) {
      font-size: pxToRem(26);
      line-height: pxToRem(32);
    }
  }
  html.sbb-lean & {
    color: $sbbColorGranite;
  }
}

// ----------------------------------------------------------------------------------------------------
// SBB Table
// ----------------------------------------------------------------------------------------------------

$tableBg: $sbbColorWhite;
$tableTheadBgColor: $sbbColorCloud;
$tableTbodyStripesBgColor: $sbbColorMilk;
$tableTheadPadding: pxToEm(16);
$tableTbodyPadding: pxToEm(16);
$tableTheadCellPaddingMobile: pxToEm(29) pxToEm(12) pxToEm(30) pxToEm(12);
$tableTheadCellPadding: pxToEm(29) pxToEm(16) pxToEm(30) pxToEm(16);
$tableTbodyCellPaddingMobile: pxToEm(18) pxToEm(12) pxToEm(19) pxToEm(12);
$tableTbodyCellPadding: pxToEm(18) pxToEm(16) pxToEm(19) pxToEm(16);
$tableTrowHeightBusiness: pxToEm(36);
$tableCaptionColor: $sbbColorGrey;

.sbb-table {
  border-spacing: 0;
  background-color: $tableBg;
  width: 100%;

  html:not(.sbb-lean) & {
    padding-bottom: $tableTbodyPadding;

    thead {
      background-color: $tableTheadBgColor;

      > tr {
        th,
        td {
          padding: $tableTheadCellPaddingMobile;

          @include mq($from: tabletPortrait) {
            padding: $tableTheadCellPadding;

            &:first-child {
              border-left: $tableTheadPadding solid $tableTheadBgColor;
            }

            &:last-child {
              border-right: $tableTheadPadding solid $tableTheadBgColor;
            }
          }
        }
      }
    }

    tbody {
      > tr {
        &:nth-child(even) {
          background-color: $tableTbodyStripesBgColor;
        }

        th,
        td {
          padding: $tableTbodyCellPaddingMobile;

          @include mq($from: tabletPortrait) {
            padding: $tableTbodyCellPadding;

            &:first-child {
              border-left: $tableTheadPadding solid $tableBg;
            }

            &:last-child {
              border-right: $tableTheadPadding solid $tableBg;
            }
          }
        }
      }
    }

    @include mq($from: desktop4k) {
      font-size: toRem(1 * $scalingFactor4k);
    }
    @include mq($from: desktop5k) {
      font-size: toRem(1 * $scalingFactor5k);
    }
  }
  html.sbb-lean & {
    border-collapse: collapse;

    thead {
      text-align: left;
      background-color: $sbbColorMilk;
      border-bottom: pxToRem(1) solid $sbbColorAluminum;

      [dir='rtl'] & {
        text-align: right;
      }
    }

    tbody {
      > tr {
        background-color: $sbbColorWhite;
        border-bottom: pxToRem(1) solid $sbbColorAluminum;

        &:hover {
          background-color: $sbbColorCloud;
        }
      }
    }

    thead,
    tbody,
    tfoot {
      > tr {
        th,
        td {
          height: $tableTrowHeightBusiness;
          padding: 0 $tableTbodyPadding;
          border-right: pxToRem(1) solid $sbbColorAluminum;
          overflow: hidden;
          text-overflow: ellipsis;

          &:first-child {
            padding-left: $tableTbodyPadding;
            border-left: none;

            [dir='rtl'] & {
              padding-left: 0;
              padding-right: $tableTbodyPadding;
            }
          }

          &:last-child {
            padding-right: $tableTbodyPadding;
            border-right: none;

            [dir='rtl'] & {
              padding-right: 0;
              padding-left: $tableTbodyPadding;
            }
          }
        }
      }
    }
  }

  caption {
    font-size: pxToRem(13);
    color: $tableCaptionColor;
  }
}

.sbb-table-align-center {
  text-align: center;
}

.sbb-table-align-left {
  text-align: left;

  /* th in IE11 won't inherit text-align: we apply it through selector */
  thead,
  tbody {
    > tr {
      th {
        text-align: left;
      }
    }
  }
}

.sbb-table-align-right {
  text-align: right;

  /* th in IE11 won't inherit text-align: we apply it through selector */
  thead,
  tbody {
    > tr {
      th {
        text-align: right;
      }
    }
  }
}

// ----------------------------------------------------------------------------------------------------
// SBB time-input
// ----------------------------------------------------------------------------------------------------

input.sbb-input-element.sbb-time-input {
  $timeInputWidthStandard: 84;
  $timeInputHeightStandard: 48;

  width: pxToRem($timeInputWidthStandard);
  height: pxToRem($timeInputHeightStandard);
  text-align: center;

  html:not(.sbb-lean) & {
    @include mq($from: desktop4k) {
      width: pxToRem(128);
      height: pxToRem($timeInputHeightStandard * $scalingFactor4k);
    }
    @include mq($from: desktop5k) {
      width: pxToRem($timeInputWidthStandard * $scalingFactor5k);
      height: pxToRem($timeInputHeightStandard * $scalingFactor5k);
    }
  }

  html.sbb-lean & {
    width: pxToRem(70);
    height: pxToRem(36);
  }
}

// ----------------------------------------------------------------------------------------------------
// SBB scrollbar
// ----------------------------------------------------------------------------------------------------

$thumbColor: $sbbColorPlatinum;
$trackColor: $sbbColorMilk;

@mixin scrollbarColor($thumbColor, $trackColor) {
  scrollbar-color: $thumbColor $trackColor;
  &::-webkit-scrollbar-thumb {
    background-color: $thumbColor;
  }
  &::-webkit-scrollbar-track {
    background-color: $trackColor;
  }
}

.sbb-scrollbar {
  @include scrollbarColor(transparent, transparent);

  &:hover,
  &.sbb-scrollbar-opaque {
    @include scrollbarColor($thumbColor, $trackColor);
  }

  scrollbar-width: thin;
  &::-webkit-scrollbar {
    width: 0.5rem;
    height: 0.5rem;
  }

  @supports (-webkit-touch-callout: none) {
    // Only applied on iOS devices.
    // Sets scrollbar on iOS devices invisible which solves a bug where a scrollbar
    // is wrongly visible for a short time (until clicking or scrolling) inside the sidebar.
    &::-webkit-scrollbar {
      width: 0;
      height: 0;
    }
  }

  &:hover::-webkit-scrollbar-thumb:hover {
    background-color: $sbbColorStorm;
  }
}

// ----------------------------------------------------------------------------------------------------
// Utility
// ----------------------------------------------------------------------------------------------------

.clearfix {
  @include clearfix;
}

// ----------------------------------------------------------------------------------------------------
// Sbb Panel
// ----------------------------------------------------------------------------------------------------

$panelBorderWidthStandard: 2;
$panelBorderWidthLean: 1;
$panelBorderRadius: 2;

.sbb-panel {
  width: 100%;
  overflow-x: hidden;
  overflow-y: auto;
  background-color: $sbbColorWhite;
  border: pxToRem($panelBorderWidthStandard) solid $sbbColorGrey;
  border-radius: 0 0 pxToRem($panelBorderRadius) pxToRem($panelBorderRadius);
  border-top: none;
  transition: height 0.25s cubic-bezier(0.4, 0, 0.2, 1), opacity 0.25s cubic-bezier(0.4, 0, 0.2, 1);
  color: $sbbColorGrey;

  @include panelShadow();

  hr {
    margin: pxToRem(10) 0;
    padding: 0;
    border: none;
    border-top: solid pxToRem(1) $sbbColorCloud;
  }

  .sbb-label {
    color: $sbbColorMetal;
    padding: pxToRem(5) pxToRem(14);

    html:not(.sbb-lean) & {
      @include mq($from: desktop4k) {
        padding: pxToRem(5 * $scalingFactor4k) pxToRem(14 * $scalingFactor4k);
      }

      @include mq($from: desktop5k) {
        padding: pxToRem(5 * $scalingFactor5k) pxToRem(14 * $scalingFactor5k);
      }
    }

    html.sbb-lean & {
      color: $sbbColorGranite; // Redefine color to be more specific than standard variant
      padding: pxToRem(4) pxToRem(8);
    }
  }

  html:not(.sbb-lean) & {
    @include mq($from: desktop4k) {
      border-width: pxToRem($panelBorderWidthStandard * $scalingFactor4k);
      border-radius: 0 0 pxToRem($panelBorderRadius * $scalingFactor4k)
        pxToRem($panelBorderRadius * $scalingFactor4k);
      @include panelShadow($scalingFactor: $scalingFactor4k);
    }

    @include mq($from: desktop5k) {
      border-width: pxToRem($panelBorderWidthStandard * $scalingFactor5k);
      border-radius: 0 0 pxToRem($panelBorderRadius * $scalingFactor5k)
        pxToRem($panelBorderRadius * $scalingFactor5k);
      @include panelShadow($scalingFactor: $scalingFactor5k);
    }
  }

  html.sbb-lean & {
    border-width: pxToRem($panelBorderWidthLean);
    border-color: $sbbColorIron;
    color: $sbbColorIron;
    @include panelShadow($borderWidth: $panelBorderWidthLean);

    hr {
      margin: pxToRem(4) 0;
    }
  }
}

.sbb-panel-above {
  border-radius: pxToRem($panelBorderRadius) pxToRem($panelBorderRadius) 0 0;
  border-top-width: pxToRem($panelBorderWidthStandard);
  border-top-style: solid;
  border-bottom: none;
  @include panelShadow($attached: above);

  html:not(.sbb-lean) & {
    @include mq($from: desktop4k) {
      border-radius: pxToRem($panelBorderRadius * $scalingFactor4k)
        pxToRem($panelBorderRadius * $scalingFactor4k) 0 0;
      border-top-width: pxToRem($panelBorderRadius * $scalingFactor4k);
      @include panelShadow($attached: above, $scalingFactor: $scalingFactor4k);
    }

    @include mq($from: desktop5k) {
      border-radius: pxToRem($panelBorderRadius * $scalingFactor5k)
        pxToRem($panelBorderRadius * $scalingFactor5k) 0 0;
      border-top-width: pxToRem($panelBorderRadius * $scalingFactor5k);
      @include panelShadow($attached: above, $scalingFactor: $scalingFactor5k);
    }
  }

  html.sbb-lean & {
    border-width: pxToRem($panelBorderWidthLean);
    border-bottom: none;
    @include panelShadow($attached: above, $borderWidth: $panelBorderWidthLean);
  }
}

.sbb-panel-padded {
  padding-top: pxToRem(10);
  padding-bottom: pxToRem(10);

  html:not(.sbb-lean) & {
    @include mq($from: desktop4k) {
      padding-top: pxToRem(10 * $scalingFactor4k);
      padding-bottom: pxToRem(10 * $scalingFactor4k);
    }
    @include mq($from: desktop5k) {
      padding-top: pxToRem(10 * $scalingFactor5k);
      padding-bottom: pxToRem(10 * $scalingFactor5k);
    }
  }

  html.sbb-lean & {
    padding-top: pxToRem(4);
    padding-bottom: pxToRem(4);
  }
}

.sbb-input-with-open-panel:not(.sbb-input-with-open-panel-above).sbb-input-element,
.sbb-input-with-open-panel:not(.sbb-input-with-open-panel-above) > .sbb-input-element {
  border-bottom-left-radius: 0 !important;
  border-bottom-right-radius: 0 !important;
}

.sbb-input-with-open-panel-above.sbb-input-element,
.sbb-input-with-open-panel-above > .sbb-input-element {
  border-top-left-radius: 0 !important;
  border-top-right-radius: 0 !important;
}

// ----------------------------------------------------------------------------------------------------
// Sbb Menu
// ----------------------------------------------------------------------------------------------------

$menuItemPaddingLeftRightStandard: 14;
$menuItemPaddingTopBottom: 4;

.sbb-menu-item {
  @include ellipsis;
  @include buttonResetFrameless;

  position: relative;
  display: block;
  text-decoration: none;
  padding: pxToRem($menuItemPaddingTopBottom) pxToRem($menuItemPaddingLeftRightStandard);
  text-align: left;
  max-width: 100%;
  cursor: pointer;
  outline: 0;
  color: $sbbColorGrey;
  line-height: pxToRem(23);

  html:not(.sbb-lean) & {
    @include mq($from: desktop4k) {
      font-size: pxToRem($sizeFontDefault4k);
      line-height: pxToRem(35);
      padding: pxToRem($menuItemPaddingTopBottom * $scalingFactor4k)
        pxToRem($menuItemPaddingLeftRightStandard * $scalingFactor4k);
    }
    @include mq($from: desktop5k) {
      font-size: pxToRem($sizeFontDefault5k);
      line-height: pxToRem(45);
      padding: pxToRem($menuItemPaddingTopBottom * $scalingFactor5k)
        pxToRem($menuItemPaddingLeftRightStandard * $scalingFactor5k);
    }
  }

  html.sbb-lean & {
    padding-left: pxToRem(8);
    padding-right: pxToRem(8);
    line-height: pxToRem(20);
    color: $sbbColorIron;
  }

  &:not(.sbb-focused) strong {
    color: $sbbColorBlack;
  }

  &.sbb-selected,
  &.sbb-active {
    color: $sbbColorBlack;
    html.sbb-lean & {
      @include sbbMenuItemBlackLean();
    }
  }

  &:disabled,
  &[disabled],
  &.sbb-disabled {
    cursor: default;
    opacity: 0.5;
    user-select: none;
  }

  &:not(:disabled):not([disabled]):not(.sbb-disabled):hover,
  &:not(:disabled):not([disabled]):not(.sbb-disabled):focus,
  &:not(:disabled):not([disabled]):not(.sbb-disabled):hover strong,
  &:not(:disabled):not([disabled]):not(.sbb-disabled):focus strong,
  &.sbb-focused {
    color: $sbbColorRed;
    html.sbb-lean & {
      @include sbbMenuItemRedLean();
    }
  }

  .sbb-icon {
    line-height: 0;
    margin: pxToRem(-7) 0 pxToRem(-7) 0;
    transform: translateY(pxToRem(7));
    width: pxToRem(24);
    height: pxToRem(24);

    html:not(.sbb-lean) & {
      @include mq($from: desktop4k) {
        margin-top: pxToRem(-12);
        margin-bottom: pxToRem(-12);
        transform: translateY(pxToRem(7 * $scalingFactor4k));
        width: pxToRem(36);
        height: pxToRem(36);
      }

      @include mq($from: desktop5k) {
        margin-top: pxToRem(-15);
        margin-bottom: pxToRem(-15);
        transform: translateY(pxToRem(7 * $scalingFactor5k));
        width: pxToRem(48);
        height: pxToRem(48);
      }
    }

    html.sbb-lean & {
      margin: pxToRem(-9) 0 pxToRem(-9) 0;
    }
  }

  > .sbb-icon:first-child {
    float: left; // used to ignore users whitespace and to ensure margin is correct
    margin-right: pxToRem(11);
    margin-left: pxToRem(-1);

    html:not(.sbb-lean) & {
      @include mq($from: desktop4k) {
        margin-right: pxToRem(11 * $scalingFactor4k);
        margin-left: pxToRem(-1 * $scalingFactor4k);
      }

      @include mq($from: desktop5k) {
        margin-right: pxToRem(11 * $scalingFactor5k);
        margin-left: pxToRem(-1 * $scalingFactor5k);
      }
    }

    html.sbb-lean & {
      margin-right: pxToRem(8);
      margin-left: 0;
    }
  }
}

.sbb-menu-group {
  display: block;

  .sbb-menu-item {
    padding-left: pxToRem(22);

    html:not(.sbb-lean) & {
      @include mq($from: desktop4k) {
        padding-left: pxToRem(22 * $scalingFactor4k);
      }

      @include mq($from: desktop5k) {
        padding-left: pxToRem(22 * $scalingFactor5k);
      }
    }

    html.sbb-lean & {
      padding-left: pxToRem(16);
    }
  }

  &:first-child > .sbb-label:first-child {
    padding-top: pxToRem(16);

    html:not(.sbb-lean) & {
      @include mq($from: desktop4k) {
        padding-top: pxToRem(16 * $scalingFactor4k);
      }
      @include mq($from: desktop5k) {
        padding-top: pxToRem(16 * $scalingFactor5k);
      }
    }

    .sbb-panel-padded > & {
      padding-top: pxToRem(6);

      html:not(.sbb-lean) & {
        @include mq($from: desktop4k) {
          padding-top: pxToRem(6 * $scalingFactor4k);
        }
        @include mq($from: desktop5k) {
          padding-top: pxToRem(6 * $scalingFactor5k);
        }
      }
    }
  }

  .sbb-label {
    padding-top: pxToRem(22);

    html:not(.sbb-lean) & {
      @include mq($from: desktop4k) {
        padding-top: pxToRem(22 * $scalingFactor4k);
      }

      @include mq($from: desktop5k) {
        padding-top: pxToRem(22 * $scalingFactor5k);
      }
    }

    html.sbb-lean & {
      padding-top: pxToRem(12);
    }
  }

  & + &,
  .sbb-menu-item + &,
  & + .sbb-menu-item {
    border-top: pxToRem(1) solid $sbbColorCloud;
    margin-top: pxToRem(8);

    .sbb-label {
      padding-top: pxToRem(16);

      html:not(.sbb-lean) & {
        @include mq($from: desktop4k) {
          padding-top: pxToRem(16 * $scalingFactor4k);
        }

        @include mq($from: desktop5k) {
          padding-top: pxToRem(16 * $scalingFactor5k);
        }
      }

      html.sbb-lean & {
        padding-top: pxToRem(8);
      }
    }

    html:not(.sbb-lean) & {
      @include mq($from: desktop4k) {
        border-top-width: pxToRem(1 * $scalingFactor4k);
        margin-top: pxToRem(8 * $scalingFactor4k);
      }

      @include mq($from: desktop5k) {
        border-top-width: pxToRem(1 * $scalingFactor5k);
        margin-top: pxToRem(8 * $scalingFactor5k);
      }
    }

    html.sbb-lean & {
      margin-top: pxToRem(4);
    }
  }

  & + .sbb-menu-item {
    padding-top: pxToRem(14);

    html:not(.sbb-lean) & {
      @include mq($from: desktop4k) {
        padding-top: pxToRem(14 * $scalingFactor4k);
      }

      @include mq($from: desktop5k) {
        padding-top: pxToRem(14 * $scalingFactor5k);
      }
    }

    html.sbb-lean & {
      padding-top: pxToRem(8);
    }
  }
}
