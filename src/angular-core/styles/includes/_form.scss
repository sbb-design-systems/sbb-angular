// Form Styles
// ----------------------------------------------------------------------------------------------------
$inputFieldColor: if($sbbBusiness, $sbbColorIron, $sbbColorGrey);
$inputFieldDisabledColor: if($sbbBusiness, $sbbColorGranite, $sbbColorGrey);
$labelColor: if($sbbBusiness, $sbbColorGranite, $sbbColorGrey);

@mixin disabledelement {
  opacity: 0.5;
}

@mixin readonlyelement {
  @include publicOnly() {
    background: $sbbColorMilk;
    border-color: $sbbColorAluminum;
  }

  @include businessOnly() {
    background: transparent;
    border-color: transparent;
  }
}

@mixin inputFieldPadding() {
  @include publicOnly() {
    padding: 10px 14px 11px;

    @include mq($from: desktop4k) {
      padding: toPx(10 * $scalingFactor4k) toPx(14 * $scalingFactor4k) toPx(11 * $scalingFactor4k);
    }

    @include mq($from: desktop5k) {
      padding: toPx(10 * $scalingFactor5k) toPx(14 * $scalingFactor5k) toPx(11 * $scalingFactor5k);
    }
  }

  @include businessOnly() {
    padding: 6px 7px 8px;
  }
}

@mixin inputfields {
  @include ellipsis;
  @include placeholder($sbbColorStorm);
  @include disabledinputfields;
  @include readonlyinputfields;
  @include inputFieldPadding();

  outline: none;
  background: $sbbColorWhite;
  border: 2px solid $sbbColorGraphite;
  border-radius: 2px;
  color: $inputFieldColor;
  line-height: 23px;
  font-size: pxToRem($sizeFontDefault);
  -webkit-appearance: none;
  min-height: if($sbbBusiness, 36px, 48px);

  &::-ms-clear {
    display: none;
  }

  &:focus {
    border-color: $inputFieldColor;
  }

  @include businessOnly() {
    border-width: 1px;
    line-height: toPx(20);
  }

  @include publicOnly() {
    @include mq($from: desktop4k) {
      border-width: toPx(2 * $scalingFactor4k);
      border-radius: toPx(2 * $scalingFactor4k);
      font-size: toPx($sizeFontDefault4k);
      line-height: 35px;
    }

    @include mq($from: desktop5k) {
      border-width: toPx(2 * $scalingFactor5k);
      border-radius: toPx(2 * $scalingFactor5k);
      font-size: pxToRem($sizeFontDefault5k);
      line-height: 45px;
    }
  }

  // We want to provide the error styles both for invalid state
  // in a sbb-form-field and also for Angular Form Validation.
  .sbb-form-field-invalid &:not([aria-expanded='true']),
  &.ng-touched.ng-invalid:not([aria-expanded='true']) {
    color: $sbbColorError;
    border-color: $sbbColorError;
  }
}

@mixin disabledinputfields {
  &:disabled {
    background-color: $sbbColorMilk;
    border-color: $sbbColorAluminum;
    color: $inputFieldDisabledColor;
    -webkit-text-fill-color: $inputFieldDisabledColor;
    opacity: 1;
  }
}

@mixin readonlyinputfields {
  &[readonly],
  &.sbb-readonly {
    &,
    &:focus {
      @include readonlyelement;
    }
  }
}

@mixin label {
  letter-spacing: 0;
  outline: 0;
  resize: none;
  background-color: transparent;
  font-family: $fontSbbRoman;
  font-size: pxToRem(13);
  line-height: pxToRem(16);
  color: $labelColor;
  display: block;

  @include publicOnly() {
    @include mq($from: desktop4k) {
      font-size: pxToRem(13 * $scalingFactor4k);
      line-height: pxToRem(16 * $scalingFactor4k);
    }

    @include mq($from: desktop5k) {
      font-size: pxToRem(13 * $scalingFactor5k);
      line-height: pxToRem(16 * $scalingFactor5k);
    }
  }
}

@mixin formlabel {
  color: $labelColor;
  font-size: pxToEm(13);
}

@mixin inputField() {
  display: inline-block;

  font-family: $fontSbbRoman;
  font-size: toEm(private-div(15, $sizeFontDefault));
  border: 1px solid $sbbColorPlatinum;

  @include mq($from: tabletPortrait) {
    font-size: toEm(private-div(14, $sizeFontDefault));
  }

  &:focus {
    border-color: $inputFieldColor;
  }
}

@mixin textareaBase() {
  width: 100%;
  white-space: pre-wrap;
  overflow: auto;

  &:disabled {
    opacity: 1;
  }
}

@mixin textarea() {
  @include inputfields;
  @include disabledinputfields;
  @include textareaBase();
}
